var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/ActivatedRouteServiceMock.html",[0,0.155,1,2.461]],["body/classes/ActivatedRouteServiceMock.html",[0,0.222,1,4.228,2,1.913,3,0.358,4,0.311,5,0.311,6,4.818,7,2.856,8,0.358,9,1.044,10,2.866,11,6.128,12,1.913,13,2.221,14,0.027,15,2.477,16,3.435,17,0.938,18,4.006,19,0.678,20,3.515,21,0.358,22,0.019,23,0.023,24,0.019]],["title/components/AppComponent.html",[25,0.878,26,1.34]],["body/components/AppComponent.html",[0,0.124,3,0.201,4,0.174,5,0.174,8,0.201,9,0.709,10,1.814,12,1.071,13,1.243,14,0.027,17,1.057,19,0.764,21,0.201,22,0.011,23,0.015,24,0.011,25,1.64,26,2.027,27,1.562,28,1.462,29,1.462,30,1.462,31,1.462,32,2.242,33,1.681,34,2.518,35,1.346,36,3.052,37,2.866,38,2.571,39,2.133,40,4.58,41,2.133,42,3.879,43,2.261,44,3.487,45,3.704,46,1.178,47,2.768,48,0.866,49,2.659,50,2.709,51,3.725,52,3.879,53,0.753,54,1.152,55,0.543,56,0.609,57,2.659,58,2.332,59,3.879,60,3.271,61,3.879,62,5.034,63,3.271,64,3.879,65,3.879,66,2.571,67,3.879,68,3.879,69,3.271,70,0.808,71,1.454,72,2.659,73,1.887,74,2.242,75,3.271,76,3.879,77,3.879,78,3.879,79,2.659,80,2.242,81,0.702,82,1.599,83,2.659,84,1.599,85,1.968,86,2.182,87,1.462,88,1.762,89,1.462,90,1.762,91,1.599,92,1.243,93,2.659,94,2.659,95,1.391,96,2.242,97,2.659,98,1.968,99,2.659,100,2.659,101,2.659,102,2.659,103,2.659,104,3.879,105,3.879,106,1.153,107,2.133,108,1.963,109,1.071,110,2.768,111,1.462,112,1.462,113,0.997,114,1.462,115,0.997,116,1.462,117,1.462,118,0.997,119,1.462,120,1.071,121,0.929,122,1.346,123,1.462]],["title/modules/AppModule.html",[124,1.829,125,2.205]],["body/modules/AppModule.html",[0,0.127,3,0.205,4,0.178,5,0.178,14,0.028,19,0.933,21,0.297,22,0.011,23,0.016,24,0.011,26,2.54,37,1.27,43,2.11,50,1.375,51,2.915,58,1.633,81,0.717,82,1.633,84,1.376,85,2.01,86,1.708,87,1.494,88,1.801,89,1.494,90,1.801,106,1.178,115,2.11,118,2.11,124,1.494,125,4.407,126,2.168,127,1.633,128,3.43,129,2.787,130,3.43,131,1.801,132,2.291,133,2.291,134,2.291,135,2.291,136,2.291,137,3.385,138,3.096,139,2.268,140,2.849,141,2.915,142,2.01,143,1.633,144,1.801,145,3.94,146,3.43,147,2.915,148,3.94,149,2.291,150,1.801,151,2.915,152,3.94,153,3.322,154,2.291,155,2.717,156,2.717,157,1.801,158,2.717,159,2.611,160,3.322,161,3.073,162,1.801,163,2.915,164,2.717,165,2.717,166,2.717,167,1.801,168,2.291,169,2.717,170,2.291,171,3.322,172,2.01,173,2.167,174,2.291,175,2.291,176,2.01,177,2.291,178,1.27,179,1.094,180,2.717,181,2.717,182,2.717,183,2.549,184,2.291,185,3.322,186,3.322,187,1.801,188,3.322,189,2.611,190,2.717,191,1.494]],["title/classes/AppPage.html",[0,0.155,192,2.461]],["body/classes/AppPage.html",[0,0.215,2,1.855,3,0.348,4,0.302,5,0.302,8,0.348,14,0.027,17,1.107,19,0.657,21,0.348,22,0.018,23,0.022,24,0.018,38,3.053,46,1.703,70,1.703,108,2.331,150,3.053,178,2.622,192,4.15,193,3.884,194,6.293,195,6.293,196,4.606,197,4.606,198,3.884,199,4.606,200,5.608,201,4.606,202,4.606]],["title/modules/AppRoutingModule.html",[124,1.829,137,2]],["body/modules/AppRoutingModule.html",[0,0.195,3,0.315,4,0.274,5,0.274,14,0.028,19,0.894,21,0.315,22,0.017,23,0.021,24,0.017,25,1.527,81,1.102,115,1.977,118,2.168,126,1.951,131,2.766,137,3.171,147,3.088,151,3.903,168,3.519,170,3.519,173,2.901,174,3.519,175,3.519,183,2.295,203,4.173,204,4.173,205,2.705,206,5.275,207,2.509,208,5.125,209,4.173,210,3.519,211,3.496,212,4.173,213,3.519,214,3.088,215,4.173,216,4.173]],["title/injectables/AppService.html",[43,1.247,217,1.555]],["body/injectables/AppService.html",[0,0.194,3,0.313,4,0.272,5,0.272,8,0.313,9,0.961,12,2.324,13,2.698,14,0.027,17,1.197,19,0.75,21,0.313,22,0.016,23,0.021,24,0.016,38,2.751,43,1.97,48,1.879,55,0.684,66,4.396,81,1.096,179,2.443,217,2.458,218,2.751,219,3.499,220,4.269,221,4.865,222,4.865,223,5.257,224,4.15,225,4.15,226,4.432,227,2.891,228,3.071,229,3.499]],["title/classes/AppServiceMock.html",[0,0.155,230,2.461]],["body/classes/AppServiceMock.html",[0,0.2,2,1.728,3,0.324,4,0.281,5,0.281,7,2.58,8,0.324,9,0.981,12,2.36,13,2.74,14,0.027,17,1.157,18,3.619,19,0.612,21,0.324,22,0.017,23,0.021,24,0.017,55,0.695,66,4.422,179,2.473,220,4.335,221,4.94,222,4.94,226,4.527,227,2.952,228,3.175,230,3.972,231,5.177,232,3.619,233,3.619]],["title/classes/City.html",[0,0.155,95,1.01]],["body/classes/City.html",[0,0.16,2,1.379,3,0.258,4,0.225,5,0.225,8,0.258,9,0.847,14,0.027,15,2.277,17,1.324,19,0.661,21,0.258,22,0.014,23,0.018,24,0.014,33,2.009,54,1.203,55,0.773,56,1.289,95,1.408,234,2.888,235,3.482,236,2.659,237,3.159,238,3.888,239,3.482,240,2.889,241,3.482,242,2.889,243,4.43,244,2.457,245,2.457,246,3.482,247,3.482,248,2.457,249,2.659,250,1.589,251,3.425,252,3.425,253,3.425,254,3.425,255,4.019,256,3.425,257,2.849,258,3.425,259,4.635,260,3.425,261,4.635,262,3.425,263,3.425,264,3.425,265,3.425,266,3.425,267,3.425,268,3.425,269,3.425,270,3.909,271,2.888,272,2.888,273,2.888,274,3.425]],["title/components/CityCardComponent.html",[25,0.878,113,1.247]],["body/components/CityCardComponent.html",[0,0.101,3,0.164,4,0.142,5,0.142,8,0.164,14,0.027,17,1.227,19,0.475,21,0.164,22,0.009,23,0.013,24,0.009,25,1.071,26,0.874,27,1.342,28,1.193,29,1.193,30,1.193,31,1.193,33,1.444,34,2.23,35,1.098,36,2.888,37,2.602,39,1.832,41,1.832,44,1.193,45,3.433,46,1.012,47,2.502,48,1.32,53,0.943,54,1.186,55,0.703,56,0.763,70,1.231,71,1.52,73,0.813,81,0.573,84,0.758,86,0.941,95,1.733,106,0.941,107,1.832,108,1.686,109,0.874,110,2.502,111,1.193,112,1.193,113,1.705,114,1.193,115,0.813,116,1.193,117,1.193,118,0.813,119,1.193,120,0.874,121,0.758,122,1.098,123,1.193,143,2.735,179,1.342,250,1.563,275,5.283,276,4.636,277,1.83,278,3.366,279,4.055,280,3.331,281,2.465,282,3.331,283,2.809,284,5.393,285,3.433,286,3.419,287,4.907,288,2.483,289,2.95,290,2.95,291,3.419,292,3.331,293,4.055,294,4.055,295,3.331,296,2.17,297,2.17,298,2.17,299,2.17,300,2.17,301,2.17,302,2.17,303,2.17,304,2.17,305,4.907,306,2.17,307,2.17,308,3.331,309,2.17,310,2.17,311,3.331,312,2.17,313,4.311,314,4.055,315,2.17,316,2.17,317,2.17,318,1.83,319,3.331,320,1.83,321,1.438,322,2.465,323,2.809,324,2.809,325,1.83,326,3.419,327,3,328,2.17,329,2.809,330,1.83,331,2.17,332,2.17,333,2.17,334,2.17,335,2.688,336,2.17,337,2.17,338,2.17,339,2.17,340,3.331,341,3.331,342,3.331,343,2.17,344,1.83,345,4.549,346,4.549,347,4.549,348,2.17,349,2.17,350,1.83,351,2.17]],["title/components/CityComponent.html",[25,0.878,115,1.247]],["body/components/CityComponent.html",[0,0.08,3,0.13,4,0.113,5,0.113,8,0.263,9,0.507,10,1.296,14,0.028,15,1.202,17,1.013,19,0.732,21,0.13,22,0.007,23,0.011,24,0.007,25,0.92,26,0.692,27,1.116,28,0.945,29,0.945,30,0.945,31,0.945,33,1.202,34,1.916,35,0.869,36,2.682,37,2.4,39,1.524,41,1.524,43,1.849,44,0.945,45,2.65,46,0.842,47,2.199,48,0.559,50,3.17,53,0.785,54,1.129,55,0.609,56,0.635,58,1.033,70,1.058,71,1.039,73,0.644,81,0.454,82,1.033,84,0.6,86,0.745,91,1.033,92,1.629,95,1.851,106,0.745,107,1.524,108,1.403,109,0.692,110,2.199,111,0.945,112,0.945,113,0.644,114,0.945,115,1.498,116,0.945,117,0.945,118,0.644,119,0.945,120,0.692,121,0.6,122,0.869,123,0.945,139,2.135,167,1.139,172,1.271,176,1.271,178,1.296,179,1.116,191,1.524,205,0.803,207,1.033,227,1.916,250,1.262,255,1.139,257,2.219,278,1.271,285,1.139,320,1.449,321,1.139,322,3.245,323,1.449,324,1.449,325,1.449,326,3.371,327,2.958,329,3.371,330,2.337,335,2.309,350,1.449,352,1.449,353,3.484,354,2.772,355,5.669,356,2.309,357,3.998,358,2.772,359,1.139,360,4.159,361,3.484,362,3.998,363,2.772,364,1.718,365,4.328,366,2.772,367,1.718,368,2.051,369,2.958,370,2.772,371,1.033,372,2.337,373,2.772,374,2.772,375,2.772,376,2.772,377,2.772,378,2.337,379,3.484,380,1.718,381,2.772,382,1.916,383,1.718,384,1.718,385,2.772,386,1.718,387,1.449,388,1.718,389,1.718,390,2.772,391,1.718,392,1.718,393,1.718,394,1.718,395,1.449,396,1.718,397,1.449,398,1.718,399,1.718,400,2.051,401,1.449,402,1.718,403,1.449,404,1.718,405,3.484,406,2.772,407,2.772,408,2.772,409,2.772,410,2.772,411,2.772,412,1.718,413,1.718,414,1.718,415,1.718,416,1.718,417,1.718,418,1.718,419,1.718,420,1.139,421,1.718,422,1.718,423,1.718,424,3.484,425,1.718,426,1.718,427,1.718,428,1.718,429,1.718,430,1.718,431,1.718,432,1.718,433,2.337,434,1.718,435,1.718,436,1.718,437,1.718,438,1.718,439,1.718,440,1.718,441,2.051,442,2.772,443,2.772,444,2.772,445,2.772,446,2.772,447,1.718,448,2.772,449,2.772,450,2.772,451,2.772,452,2.772,453,2.337,454,2.772,455,2.772,456,2.772,457,1.718,458,1.718,459,1.718,460,1.718,461,1.449,462,1.718,463,1.449,464,1.449,465,1.449,466,1.718,467,1.449,468,1.718,469,1.718,470,1.718]],["title/components/CityDropDownComponent.html",[25,0.878,84,1.162]],["body/components/CityDropDownComponent.html",[0,0.131,3,0.212,4,0.184,5,0.184,8,0.212,9,0.738,10,1.889,14,0.027,17,1.125,19,0.675,21,0.212,22,0.011,23,0.016,24,0.011,25,1.248,26,1.133,27,1.627,28,1.547,29,1.547,30,1.547,31,1.547,33,1.751,34,2.6,35,1.423,36,3.095,37,2.808,39,2.222,41,2.222,43,2.2,44,1.547,46,1.227,47,2.842,48,0.916,50,2.883,53,1.144,54,1.253,55,0.561,56,0.925,70,1.436,71,1.772,73,1.054,81,0.743,84,1.805,86,2.903,87,3.228,91,1.691,92,1.315,95,1.857,96,3.407,98,3.824,106,1.219,107,2.222,108,2.044,109,1.133,110,2.842,111,1.547,112,1.547,113,1.054,114,1.547,115,1.054,116,1.547,117,1.547,118,1.054,119,1.547,120,1.133,121,0.982,122,1.423,123,1.547,139,2.463,250,0.994,313,2.081,356,2.678,359,1.864,441,2.989,471,4.949,472,2.372,473,4.728,474,4.04,475,4.728,476,2.989,477,4.04,478,2.813,479,2.813,480,4.04,481,2.813,482,2.813,483,2.813,484,2.813,485,4.04,486,2.813,487,2.813,488,4.04,489,4.04,490,4.04]],["title/guards/CityResolverGuard.html",[173,1.829,491,2.461]],["body/guards/CityResolverGuard.html",[0,0.178,3,0.289,4,0.251,5,0.251,8,0.289,14,0.028,17,0.985,19,0.893,20,2.83,21,0.289,22,0.015,23,0.02,24,0.015,33,1.658,43,2.388,46,1.515,48,1.245,53,1.412,54,1.142,55,0.592,56,1.142,70,1.161,81,1.01,82,2.299,92,1.788,139,2.52,167,2.535,173,2.743,178,2.332,191,2.103,207,2.299,213,4.96,217,2.332,359,2.535,368,2.83,400,2.83,492,3.824,493,4.68,494,3.225,495,3.824,496,4.987,497,5.882,498,5.55,499,5.882,500,3.824,501,3.824,502,3.225,503,2.83,504,3.824,505,3.824,506,3.824,507,3.824]],["title/injectables/CityService.html",[139,1.34,217,1.555]],["body/injectables/CityService.html",[0,0.054,3,0.087,4,0.075,5,0.075,8,0.149,9,0.361,12,1.248,14,0.028,15,2.461,16,1.567,17,1.029,19,0.692,21,0.087,22,0.005,23,0.008,24,0.005,46,0.6,48,0.373,53,1.282,54,1.036,55,0.658,56,1.036,70,1.55,71,0.741,81,0.303,92,0.536,95,1.97,139,0.796,140,2.072,161,2.054,162,0.76,178,2.524,179,2.008,183,2.252,189,1.31,211,2.054,214,2.293,217,0.925,218,0.76,236,0.58,240,0.631,241,1.31,242,0.631,244,0.536,245,0.536,248,1.449,249,0.58,250,1.327,257,2.378,278,1.463,281,1.463,288,1,289,1.189,290,1.189,356,2.534,368,0.848,371,2.462,372,3.963,382,2.585,395,1.667,397,1.667,403,3.223,441,0.848,453,0.967,476,1.928,502,0.967,503,0.848,508,0.967,509,2.198,510,3.305,511,2.198,512,1.667,513,1.667,514,1.667,515,1.667,516,1.667,517,1.667,518,1.667,519,0.967,520,1.977,521,3.031,522,1.667,523,1.147,524,2.613,525,1.667,526,3.823,527,1.147,528,4.327,529,2.293,530,1.667,531,1.977,532,1.147,533,4.091,534,4.096,535,1.977,536,1.147,537,4.527,538,2.828,539,1.667,540,1.147,541,1.977,542,1.977,543,3.453,544,1.667,545,1.147,546,1.977,547,1.147,548,3.823,549,1.977,550,1.147,551,1.667,552,1.147,553,3.099,554,1.977,555,1.977,556,4.305,557,1.977,558,1.147,559,1.147,560,1.147,561,0.848,562,1.147,563,1.147,564,1.147,565,1.147,566,1.147,567,1.147,568,1.147,569,0.848,570,1.147,571,1.433,572,1.147,573,1.147,574,1.147,575,3.823,576,2.606,577,1.147,578,1.977,579,1.147,580,1.977,581,5.881,582,1.147,583,6.419,584,1.147,585,1.147,586,1.147,587,1.147,588,1.147,589,1.147,590,1.147,591,1.147,592,1.977,593,1.147,594,0.848,595,1.147,596,0.76,597,1.147,598,1.147,599,1.087,600,1.977,601,1.087,602,1.977,603,1.087,604,1.977,605,1.087,606,1.977,607,1.977,608,1.977,609,1.977,610,1.463,611,1.977,612,1.189,613,1.977,614,1.147,615,1.977,616,1.977,617,1.147,618,1.977,619,3.099,620,1.977,621,1.147,622,1.147,623,5.476,624,1.977,625,1.31,626,1.977,627,1.31,628,1.977,629,1.977,630,1.147,631,1.147,632,1.147,633,1.147,634,1.147,635,1.147,636,1.147,637,1.147,638,1.977,639,1.147,640,1.147,641,1.147,642,1.147,643,1.147,644,0.76,645,1.147,646,1.463,647,1.977,648,1.977,649,1.463,650,1.977,651,1.977,652,1.147,653,1.147,654,1.147,655,1.147,656,1.147,657,1.147,658,1.147,659,1.147,660,2.606,661,1.147,662,1.147,663,1.147,664,1.147,665,1.147,666,2.606,667,2.606,668,1.147,669,1.977,670,1.147,671,1.977,672,1.147,673,1.147,674,1.147,675,1.147,676,1.147,677,1.147,678,1.147,679,1.147,680,1.147,681,1.147,682,1.147,683,1.147,684,1.147]],["title/classes/CityServiceMock.html",[0,0.155,685,2.461]],["body/classes/CityServiceMock.html",[0,0.088,2,0.76,3,0.142,4,0.124,5,0.124,7,1.135,8,0.142,9,0.546,12,1.699,13,1.973,14,0.028,15,2.302,16,1.797,17,1.164,19,0.529,20,1.397,21,0.142,22,0.007,23,0.012,24,0.007,46,0.908,53,1.195,54,1.119,55,0.607,56,0.966,66,1.251,70,1.661,71,1.12,95,1.791,178,2.395,179,2.406,214,3.121,228,1.397,233,1.592,236,2.135,237,1.797,238,2.211,239,1.981,240,2.32,241,1.981,242,2.32,244,1.973,245,1.973,246,1.981,247,1.981,248,1.973,249,2.135,250,1.345,255,3.24,281,2.211,288,2.135,289,2.536,290,2.536,356,1.251,371,2.536,476,2.745,509,3.128,510,2.459,511,3.128,512,2.52,513,3.557,514,3.557,515,2.52,516,2.52,517,3.557,518,3.557,522,2.52,533,1.592,539,2.52,544,2.52,551,2.52,556,3.557,594,2.211,596,1.981,599,2.32,601,2.32,603,2.32,605,2.32,610,3.121,612,2.536,625,2.796,627,2.796,644,2.796,646,3.93,649,3.93,685,2.211,686,5.038,687,1.888,688,1.888,689,1.888,690,1.888,691,1.888,692,1.888,693,1.888,694,1.888,695,1.888,696,1.888,697,1.888,698,1.888,699,1.888,700,1.888]],["title/classes/CustomTranslateLoader.html",[0,0.155,157,2.205]],["body/classes/CustomTranslateLoader.html",[0,0.181,2,1.56,3,0.292,4,0.254,5,0.254,8,0.292,9,0.919,14,0.027,17,1.102,19,0.718,21,0.292,22,0.015,23,0.02,24,0.015,46,1.527,48,1.261,50,2.991,53,1.424,54,1.151,55,0.596,56,1.151,70,1.176,89,2.13,92,2.611,157,3.333,159,2.567,161,3.918,162,2.567,178,1.811,250,1.611,519,4.24,521,3.721,701,4.984,702,3.266,703,5.029,704,5.584,705,5.584,706,5.029,707,5.911,708,5.911,709,5.029,710,5.584,711,5.029,712,3.873,713,5.029,714,3.266,715,3.873,716,3.873,717,3.873,718,3.873]],["title/classes/DynamicComponent.html",[0,0.155,719,2.205]],["body/classes/DynamicComponent.html",[0,0.203,2,1.748,3,0.328,4,0.285,5,0.285,8,0.328,14,0.027,17,1.067,19,0.619,21,0.328,22,0.017,23,0.021,24,0.017,25,1.555,46,1.642,48,1.918,53,1.229,54,0.994,55,0.515,56,0.994,70,1.318,71,1.627,81,1.146,183,2.974,321,2.877,719,3.584,720,4.966,721,3.66,722,5.407,723,4.341,724,5.407,725,5.198,726,5.53,727,4.341,728,4.341,729,4.341,730,4.341,731,4.341,732,4.341]],["title/directives/DynamicContentDirective.html",[109,1.34,121,1.162]],["body/directives/DynamicContentDirective.html",[0,0.21,3,0.339,4,0.295,5,0.295,8,0.339,9,1.01,10,2.584,14,0.027,17,1.091,19,0.642,21,0.339,22,0.018,23,0.022,24,0.018,35,2.275,36,2.796,48,1.464,53,1.273,54,1.029,55,0.655,56,1.029,81,1.187,91,2.703,109,2.226,120,1.811,121,1.93,122,2.796,725,5.67,733,5.045,734,3.791,735,4.496,736,4.496,737,4.496]],["title/classes/Forecast.html",[0,0.155,257,1.683]],["body/classes/Forecast.html",[0,0.198,2,1.709,3,0.32,4,0.278,5,0.278,8,0.32,9,0.974,14,0.027,17,1.288,19,0.605,21,0.32,22,0.017,23,0.021,24,0.017,33,2.311,55,0.691,56,1.22,236,2.949,240,3.205,242,3.205,244,2.726,245,2.726,248,2.726,249,2.949,250,1.504,257,2.697,270,4.495,271,3.578,272,3.578,273,3.578,738,3.578,739,3.863,740,5.331,741,4.243,742,4.243,743,4.243,744,4.243,745,4.243,746,4.243]],["title/components/HomeComponent.html",[25,0.878,118,1.247]],["body/components/HomeComponent.html",[0,0.131,3,0.211,4,0.183,5,0.183,8,0.211,9,0.735,10,2.554,14,0.028,15,2.043,17,1.157,19,0.811,21,0.211,22,0.011,23,0.016,24,0.011,25,1.244,26,1.127,27,1.621,28,1.538,29,1.538,30,1.538,31,1.538,33,1.744,34,2.592,35,1.415,36,3.09,37,2.804,39,2.213,41,2.213,43,2.324,44,1.538,46,1.222,47,2.835,48,0.911,50,2.608,53,1.335,54,1.302,55,0.559,56,1.079,70,1.565,71,2.047,73,1.048,81,0.738,82,1.682,84,1.405,85,2.07,86,2.043,87,1.538,88,1.854,91,1.682,92,1.308,95,1.222,98,3.814,106,1.212,107,2.213,108,2.036,109,1.127,110,2.835,111,1.538,112,1.538,113,1.048,114,1.538,115,1.048,116,1.538,117,1.538,118,1.932,119,1.538,120,1.127,121,0.977,122,1.415,123,1.538,139,2.46,167,1.854,191,1.538,205,1.308,207,1.682,211,2.667,227,1.538,359,1.854,360,4.941,387,2.359,400,2.977,747,2.359,748,4.713,749,4.024,750,4.024,751,4.024,752,2.797,753,2.797,754,4.024,755,2.797,756,2.797,757,4.024,758,2.797,759,2.797,760,2.797,761,2.797,762,2.797,763,2.797,764,2.797,765,4.024,766,4.024]],["title/interfaces/ICity.html",[235,2.205,767,0.942]],["body/interfaces/ICity.html",[3,0.225,4,0.195,5,0.195,8,0.225,9,0.769,14,0.028,15,2.425,19,0.798,21,0.225,22,0.012,23,0.017,24,0.012,54,1.281,55,0.773,95,1.699,235,2.79,236,2.684,237,3.491,238,3.924,239,3.515,240,2.917,242,2.917,244,2.616,245,2.616,246,3.708,247,3.708,248,2.616,249,2.831,250,1.612,255,4.109,285,1.975,288,1.508,369,2.204,382,1.638,420,1.975,571,3.077,599,1.638,601,1.638,603,1.638,605,1.638,612,1.791,767,1.192,768,1.393,769,2.512,770,3.708,771,3.364,772,3.665,773,3.364,774,2.512,775,2.512,776,2.512,777,2.512,778,2.979,779,2.979,780,2.512,781,3.549,782,2.512,783,2.512,784,2.512,785,2.512,786,2.512,787,2.512,788,2.512,789,2.979]],["title/interfaces/ICoord.html",[767,0.942,770,2.205]],["body/interfaces/ICoord.html",[3,0.35,4,0.304,5,0.304,8,0.35,9,1.029,14,0.027,21,0.35,22,0.018,23,0.022,24,0.018,55,0.668,95,1.709,250,1.616,543,3.907,594,4.781,596,4.283,767,1.312,768,2.167,770,3.731,786,3.907,787,4.746,788,4.746,790,3.907,791,4.634,792,4.634]],["title/interfaces/IForecast.html",[739,2.205,767,0.942]],["body/interfaces/IForecast.html",[3,0.274,4,0.238,5,0.238,8,0.274,9,0.881,14,0.028,19,0.822,21,0.274,22,0.014,23,0.019,24,0.014,55,0.746,56,1.103,236,2.917,240,3.17,242,3.17,244,2.805,245,2.805,248,2.805,249,3.036,250,1.517,257,1.837,288,1.837,369,2.687,382,1.997,420,2.407,571,3.299,599,1.997,601,1.997,603,1.997,605,1.997,612,2.183,739,3.195,767,1.365,768,1.698,771,3.607,772,3.842,773,3.607,774,3.062,775,3.062,776,3.062,777,3.062,781,4.065,782,3.062,783,3.062,784,3.062,785,3.062,793,3.062]],["title/interfaces/IMain.html",[767,0.942,771,2]],["body/interfaces/IMain.html",[3,0.253,4,0.22,5,0.22,8,0.253,9,0.836,12,2.094,14,0.027,21,0.253,22,0.013,23,0.018,24,0.013,55,0.744,56,1.047,250,1.683,288,3.05,289,3.357,290,3.357,365,3.855,382,1.846,510,3.03,599,3.212,601,3.212,603,3.212,605,3.392,644,3.7,767,0.951,768,1.57,771,2.749,794,2.83,795,5.2,796,3.848,797,5.2,798,4.385,799,5.2,800,4.385,801,5.2,802,5.2,803,4.572,804,5.2,805,5.2,806,3.357,807,4.572,808,4.572,809,4.572,810,4.572,811,4.572,812,4.572,813,4.572,814,3.855,815,4.572,816,4.572,817,3.357,818,3.357]],["title/interfaces/IVolume.html",[767,0.942,772,2]],["body/interfaces/IVolume.html",[3,0.352,4,0.306,5,0.306,8,0.352,9,1.033,14,0.027,16,2.803,21,0.352,22,0.018,23,0.022,24,0.018,55,0.67,250,1.618,646,4.676,649,4.676,767,1.32,768,2.18,772,3.397,819,3.931,820,5.65,821,5.65,822,5.65,823,5.65,824,3.931]],["title/interfaces/IWeather.html",[571,1.829,767,0.942]],["body/interfaces/IWeather.html",[3,0.325,4,0.282,5,0.282,8,0.325,9,0.983,14,0.027,15,2.797,21,0.325,22,0.017,23,0.021,24,0.017,53,1.219,55,0.729,244,2.012,245,2.012,248,2.874,250,1.67,371,3.695,420,3.565,571,2.958,625,4.193,627,4.073,767,1.219,768,2.012,780,3.629,825,3.629,826,5.378,827,4.304,828,4.304]],["title/interfaces/IWind.html",[767,0.942,773,2]],["body/interfaces/IWind.html",[3,0.349,4,0.303,5,0.303,8,0.349,9,1.027,12,1.861,14,0.027,21,0.349,22,0.018,23,0.022,24,0.018,55,0.666,249,2.843,250,1.615,610,4.661,612,3.881,767,1.308,768,2.16,773,3.378,796,3.418,798,3.895,800,3.895,829,3.895,830,5.618,831,4.62,832,4.62,833,4.62,834,4.62]],["title/components/ModalComponent.html",[25,0.878,73,1.247]],["body/components/ModalComponent.html",[0,0.154,3,0.162,4,0.141,5,0.141,8,0.162,9,0.604,10,1.883,12,1.33,13,1.544,14,0.028,17,1.199,19,0.645,21,0.162,22,0.008,23,0.013,24,0.008,25,1.464,26,0.864,27,1.33,28,1.18,29,1.18,30,1.18,31,1.18,33,1.431,34,2.214,35,1.086,36,2.878,37,2.593,39,1.816,41,1.816,44,3.298,45,3.236,46,1.003,47,2.487,48,0.699,53,0.935,54,1.118,55,0.579,56,0.756,69,1.809,70,1.483,71,2.132,73,1.695,74,2.785,75,2.785,80,1.809,81,0.566,84,0.749,86,0.93,89,1.18,92,1.544,95,1.003,106,0.93,107,1.816,108,1.671,109,0.864,110,2.487,111,1.18,112,1.18,113,0.804,114,1.18,115,0.804,116,1.18,117,1.18,118,0.804,119,1.18,120,0.864,121,1.579,122,1.086,123,1.18,129,1.985,179,1.33,191,1.816,210,1.809,220,3.346,227,3.049,250,0.812,283,2.785,313,2.444,318,1.809,321,2.668,322,1.587,327,1.587,335,1.422,344,3.395,433,2.785,461,2.785,463,1.809,464,3.395,465,1.809,467,1.809,503,1.587,719,3.236,726,4.529,835,1.809,836,4.026,837,3.302,838,4.026,839,4.026,840,4.026,841,4.522,842,4.522,843,3.302,844,2.145,845,4.522,846,4.026,847,4.522,848,3.302,849,3.302,850,2.145,851,2.145,852,2.145,853,2.145,854,2.145,855,3.302,856,2.145,857,2.145,858,3.302,859,2.145,860,2.145,861,4.026,862,2.145,863,2.145,864,2.145,865,2.145,866,2.145,867,3.302,868,1.809,869,1.809,870,3.302,871,4.522,872,2.145,873,2.145,874,3.302,875,2.145,876,4.026,877,2.145,878,2.145,879,2.145,880,2.145,881,2.145,882,2.145,883,2.145,884,2.145,885,2.145,886,3.302,887,3.302,888,2.145,889,2.145,890,2.145,891,2.145,892,2.145,893,4.026,894,2.145,895,1.809,896,2.145,897,2.145,898,2.145,899,2.145,900,2.145,901,3.302,902,2.145,903,1.809,904,2.145,905,2.145,906,2.145,907,2.145,908,2.145,909,2.145,910,2.145,911,2.145]],["title/classes/RouterServiceMock.html",[0,0.155,912,2.461]],["body/classes/RouterServiceMock.html",[0,0.23,2,1.982,3,0.371,4,0.323,5,0.323,7,2.958,8,0.371,14,0.027,17,0.971,21,0.371,22,0.019,23,0.023,24,0.019,46,1.772,70,1.494,71,1.844,232,4.149,912,4.318,913,4.921,914,5.425]],["title/modules/SharedModule.html",[124,1.829,138,1.829]],["body/modules/SharedModule.html",[0,0.154,3,0.249,4,0.216,5,0.216,14,0.028,19,0.905,21,0.249,22,0.013,23,0.018,24,0.013,27,2.075,73,2.428,81,0.871,84,2.262,86,1.958,87,1.814,88,2.186,89,2.484,90,2.186,106,1.43,113,2.428,120,2.075,121,2.262,124,1.814,126,1.542,127,1.983,128,3.813,129,2.716,130,3.343,131,3.415,138,3.673,141,3.343,142,2.44,143,1.983,147,2.44,151,3.343,154,3.809,160,3.809,162,2.186,183,2.834,276,2.44,868,2.781,869,2.781,915,2.781,916,2.781,917,2.781,918,2.44,919,4.517,920,2.781,921,3.298,922,3.298,923,4.517,924,3.298,925,3.298,926,3.813,927,3.298]],["title/injectables/StorageService.html",[140,1.683,217,1.555]],["body/injectables/StorageService.html",[0,0.172,3,0.279,4,0.242,5,0.242,8,0.279,10,2.897,13,2.897,14,0.028,17,1.145,19,0.527,21,0.279,22,0.015,23,0.019,24,0.015,38,2.448,46,1.48,48,1.777,53,1.545,54,1.249,55,0.647,56,1.249,70,1.657,71,1.827,81,0.975,140,2.467,178,2.279,183,2.031,217,2.279,218,2.448,229,3.114,250,1.596,401,3.114,524,3.114,538,2.733,928,3.114,929,4.875,930,4.875,931,4.875,932,3.693,933,4.875,934,3.693,935,5.457,936,4.875,937,3.693,938,4.875,939,3.693,940,3.693,941,3.693,942,3.693,943,3.693,944,3.693,945,3.693,946,4.875,947,3.693,948,3.693,949,3.693]],["title/coverage.html",[950,3.831]],["body/coverage.html",[0,0.283,1,2.003,5,0.177,6,2.282,7,3.052,14,0.027,22,0.011,23,0.016,24,0.011,25,1.485,26,1.09,27,1.09,32,2.282,43,1.015,50,1.37,55,0.321,73,1.015,84,0.945,86,1.703,87,1.489,95,0.822,109,1.09,113,1.015,115,1.015,118,1.015,120,1.09,121,0.945,126,1.266,139,1.09,140,1.37,144,3.365,146,2.003,157,1.794,163,2.003,173,1.489,176,2.908,179,1.09,187,1.794,189,1.794,192,2.003,193,2.282,205,1.266,217,2.163,219,2.282,230,2.003,231,2.282,234,2.282,235,1.794,257,1.37,275,2.282,276,2.003,277,2.282,335,4.558,352,2.282,471,2.282,472,2.282,491,2.003,493,2.282,494,2.282,508,2.282,561,2.003,569,2.003,571,1.489,685,2.003,686,2.282,701,2.282,702,2.282,719,1.794,720,2.282,721,2.282,733,2.282,734,2.282,738,2.282,739,1.794,747,2.282,767,1.643,769,2.282,770,1.794,771,1.627,772,1.627,773,1.627,790,2.282,793,2.282,794,2.282,819,2.282,825,2.282,829,2.282,835,2.282,895,2.282,912,2.003,913,2.282,918,3.423,926,2.003,928,2.282,950,2.282,951,2.707,952,2.707,953,2.707,954,5.802,955,2.707,956,2.707,957,6.458,958,6.361,959,4.626,960,2.707,961,2.707,962,4.626,963,3.93,964,3.93,965,3.93,966,2.707,967,3.314,968,2.282,969,2.282,970,2.707,971,2.707,972,2.707,973,2.707,974,2.707,975,2.282,976,2.282,977,2.707,978,2.282,979,3.314,980,2.282,981,3.314,982,2.282,983,2.282,984,2.707]],["title/dependencies.html",[127,2.406,985,2.776]],["body/dependencies.html",[14,0.028,22,0.017,23,0.021,24,0.017,58,2.551,63,3.578,81,1.12,89,3.205,90,2.812,127,2.551,129,3.205,149,4.495,150,3.533,159,2.812,172,3.944,207,2.551,208,3.578,714,3.578,920,3.578,986,4.243,987,6.599,988,4.243,989,4.243,990,4.243,991,4.243,992,4.243,993,4.243,994,4.243,995,4.243,996,4.243,997,4.243,998,4.243,999,4.243,1000,4.243,1001,4.243,1002,4.243,1003,4.243,1004,4.243,1005,4.243,1006,4.243,1007,4.243,1008,4.243,1009,4.243,1010,4.243,1011,4.243]],["title/miscellaneous/functions.html",[1012,1.84,1013,3.374]],["body/miscellaneous/functions.html",[8,0.374,14,0.026,22,0.02,23,0.023,24,0.02,51,3.665,53,1.659,54,1.341,56,1.341,144,3.283,163,4.335,177,4.176,187,3.883,521,3.665,975,4.176,976,4.94,1012,3.283,1013,4.176,1014,4.953,1015,4.176,1016,4.953]],["title/index.html",[8,0.209,525,2.34,1017,2.776]],["body/index.html",[4,0.266,14,0.021,22,0.016,23,0.021,24,0.016,25,1.508,37,1.899,54,0.93,58,3.434,60,5.242,143,2.441,179,1.635,198,3.424,237,2.441,286,3.424,529,3.005,796,3.836,814,4.816,914,3.424,1018,5.184,1019,4.061,1020,5.711,1021,4.061,1022,4.061,1023,4.061,1024,5.184,1025,6.461,1026,4.061,1027,4.061,1028,4.061,1029,4.061,1030,4.061,1031,4.061,1032,4.061,1033,4.061,1034,5.711,1035,4.061,1036,6.216,1037,4.061,1038,4.061,1039,4.061,1040,4.061,1041,4.061,1042,3.424,1043,5.184,1044,6.017,1045,4.061,1046,5.184,1047,5.184,1048,4.061,1049,6.017,1050,4.061,1051,4.061,1052,5.711,1053,4.061,1054,4.061,1055,4.061,1056,4.061]],["title/modules.html",[126,2.125]],["body/modules.html",[14,0.024,22,0.02,23,0.024,24,0.02,125,3.394,126,2.395,137,3.079,138,2.816,150,3.96,1057,5.974,1058,5.974,1059,6.325,1060,5.121,1061,5.121]],["title/overview.html",[1062,3.831]],["body/overview.html",[2,1.448,14,0.027,16,2.88,22,0.014,23,0.019,24,0.014,26,2.528,27,1.448,43,2.019,73,2.353,84,2.192,106,1.559,109,1.448,113,2.353,115,2.019,118,2.019,121,2.192,124,1.978,125,4.515,126,1.682,127,2.162,128,2.661,129,2.162,130,2.661,131,2.384,132,3.033,133,3.033,134,3.033,135,3.033,136,3.033,137,3.238,138,3.697,139,2.169,140,2.725,141,3.544,142,2.661,143,2.162,205,1.682,218,2.384,378,3.033,491,2.661,768,1.682,824,4.039,903,3.033,915,3.033,916,3.033,917,3.033,1062,3.033,1063,3.596,1064,3.596]],["title/routes.html",[205,2.125]],["body/routes.html",[14,0.024,22,0.021,23,0.024,24,0.021,205,2.514]],["title/miscellaneous/variables.html",[1012,1.84,1065,3.374]],["body/miscellaneous/variables.html",[8,0.201,12,2.529,13,2.937,14,0.028,15,1.985,22,0.011,23,0.015,24,0.011,27,1.562,43,0.997,54,0.888,55,0.752,73,0.997,84,1.355,95,1.625,113,0.997,120,1.562,121,0.929,126,1.814,138,1.462,139,1.071,140,1.346,144,1.762,146,2.87,153,2.242,159,1.762,161,1.762,171,2.242,173,1.462,184,2.242,185,2.242,186,2.242,187,1.762,188,2.242,189,2.571,191,2.133,205,1.814,211,2.571,227,1.462,236,1.346,237,1.599,239,1.762,241,1.762,243,3.271,244,1.814,245,1.814,246,1.762,247,1.762,248,1.814,285,1.762,288,1.346,289,1.599,290,1.599,291,2.242,371,1.599,382,1.462,510,1.762,529,1.968,530,2.242,538,3.961,561,2.87,569,2.87,596,1.762,599,1.462,601,1.462,603,1.462,605,1.462,625,1.762,627,1.762,644,1.762,918,1.968,926,2.87,967,2.242,968,2.242,969,3.271,978,2.242,979,4.245,980,2.242,981,2.242,982,3.271,983,3.271,1012,1.762,1015,3.862,1042,3.271,1065,2.242,1066,2.659,1067,4.58,1068,3.879,1069,2.659,1070,2.659,1071,3.879,1072,2.659,1073,4.58,1074,2.659,1075,4.58,1076,2.659,1077,2.659,1078,2.659,1079,2.659,1080,2.659,1081,2.659,1082,2.659,1083,2.659,1084,2.659,1085,2.659,1086,2.659,1087,3.879,1088,3.879,1089,3.879,1090,2.659,1091,2.659,1092,2.659,1093,2.659,1094,3.879,1095,2.659,1096,2.659,1097,2.659,1098,2.659,1099,2.659,1100,2.659,1101,2.659,1102,2.659,1103,2.659,1104,2.659,1105,2.659,1106,2.659,1107,2.659,1108,2.659,1109,2.659,1110,2.659,1111,2.659,1112,2.659,1113,2.659,1114,2.659,1115,2.659,1116,2.659,1117,2.659,1118,2.659,1119,2.659,1120,2.659,1121,2.659,1122,2.659,1123,2.659]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"classes/City.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{},"classes/Forecast.html":{},"components/HomeComponent.html":{},"interfaces/ICity.html":{},"interfaces/ICoord.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"interfaces/IVolume.html":{},"interfaces/IWeather.html":{},"interfaces/IWind.html":{},"components/ModalComponent.html":{},"classes/RouterServiceMock.html":{},"modules/SharedModule.html":{},"injectables/StorageService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":335,"title":{},"body":{"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/ModalComponent.html":{},"coverage.html":{}}}],["0.12.7",{"_index":1005,"title":{},"body":{"dependencies.html":{}}}],["0.3",{"_index":339,"title":{},"body":{"components/CityCardComponent.html":{}}}],["0.3s",{"_index":347,"title":{},"body":{"components/CityCardComponent.html":{}}}],["0.8.26",{"_index":1011,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":957,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":965,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":970,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":966,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":972,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":963,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":954,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":964,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":959,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":977,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":962,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":971,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":375,"title":{},"body":{"components/CityComponent.html":{}}}],["04",{"_index":376,"title":{},"body":{"components/CityComponent.html":{}}}],["1",{"_index":16,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/IVolume.html":{},"overview.html":{}}}],["1.0.1",{"_index":1003,"title":{},"body":{"dependencies.html":{}}}],["1.65em",{"_index":328,"title":{},"body":{"components/CityCardComponent.html":{}}}],["1.9.0",{"_index":1009,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":886,"title":{},"body":{"components/ModalComponent.html":{}}}],["11.0.1",{"_index":990,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":406,"title":{},"body":{"components/CityComponent.html":{}}}],["12px",{"_index":331,"title":{},"body":{"components/CityCardComponent.html":{}}}],["1h",{"_index":1111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":437,"title":{},"body":{"components/CityComponent.html":{}}}],["2.5.4",{"_index":998,"title":{},"body":{"dependencies.html":{}}}],["2.5em",{"_index":458,"title":{},"body":{"components/CityComponent.html":{}}}],["2019",{"_index":374,"title":{},"body":{"components/CityComponent.html":{}}}],["20px",{"_index":463,"title":{},"body":{"components/CityComponent.html":{},"components/ModalComponent.html":{}}}],["21:00:00",{"_index":377,"title":{},"body":{"components/CityComponent.html":{}}}],["2px",{"_index":336,"title":{},"body":{"components/CityCardComponent.html":{}}}],["3",{"_index":824,"title":{},"body":{"interfaces/IVolume.html":{},"overview.html":{}}}],["3.2.0",{"_index":1004,"title":{},"body":{"dependencies.html":{}}}],["3/6",{"_index":956,"title":{},"body":{"coverage.html":{}}}],["35px",{"_index":469,"title":{},"body":{"components/CityComponent.html":{}}}],["3em",{"_index":459,"title":{},"body":{"components/CityComponent.html":{}}}],["3h",{"_index":1113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":903,"title":{},"body":{"components/ModalComponent.html":{},"overview.html":{}}}],["4.0.0",{"_index":991,"title":{},"body":{"dependencies.html":{}}}],["4.16.4",{"_index":1000,"title":{},"body":{"dependencies.html":{}}}],["4.3.1",{"_index":995,"title":{},"body":{"dependencies.html":{}}}],["46",{"_index":973,"title":{},"body":{"coverage.html":{}}}],["4em",{"_index":351,"title":{},"body":{"components/CityCardComponent.html":{}}}],["5).map(el",{"_index":662,"title":{},"body":{"injectables/CityService.html":{}}}],["5.0.36",{"_index":993,"title":{},"body":{"dependencies.html":{}}}],["5/9",{"_index":961,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":955,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":422,"title":{},"body":{"components/CityComponent.html":{}}}],["55",{"_index":960,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1063,"title":{},"body":{"overview.html":{}}}],["6.2.0",{"_index":1001,"title":{},"body":{"dependencies.html":{}}}],["6.3.3",{"_index":1007,"title":{},"body":{"dependencies.html":{}}}],["6em",{"_index":457,"title":{},"body":{"components/CityComponent.html":{}}}],["6px",{"_index":337,"title":{},"body":{"components/CityCardComponent.html":{}}}],["7",{"_index":1064,"title":{},"body":{"overview.html":{}}}],["7.0.2",{"_index":994,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":987,"title":{},"body":{"dependencies.html":{}}}],["7.3.4",{"_index":1022,"title":{},"body":{"index.html":{}}}],["7/15",{"_index":974,"title":{},"body":{"coverage.html":{}}}],["80px",{"_index":462,"title":{},"body":{"components/CityComponent.html":{}}}],["9",{"_index":378,"title":{},"body":{"components/CityComponent.html":{},"overview.html":{}}}],["9765e5667b1e716a354bdb880cc11d53",{"_index":1089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_1h",{"_index":1110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_3h",{"_index":1112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activatedroute",{"_index":362,"title":{},"body":{"components/CityComponent.html":{}}}],["activatedrouteservicemock",{"_index":1,"title":{"classes/ActivatedRouteServiceMock.html":{}},"body":{"classes/ActivatedRouteServiceMock.html":{},"coverage.html":{}}}],["activatedroutesnapshot",{"_index":497,"title":{},"body":{"guards/CityResolverGuard.html":{}}}],["activeroute",{"_index":361,"title":{},"body":{"components/CityComponent.html":{}}}],["actual_component",{"_index":123,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["add",{"_index":524,"title":{},"body":{"injectables/CityService.html":{},"injectables/StorageService.html":{}}}],["addcity",{"_index":98,"title":{},"body":{"components/AppComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{}}}],["addcomponent",{"_index":722,"title":{},"body":{"classes/DynamicComponent.html":{}}}],["addcomponent(container",{"_index":724,"title":{},"body":{"classes/DynamicComponent.html":{}}}],["addnewcity",{"_index":512,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["addnewcity(id",{"_index":522,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["afterviewinit",{"_index":864,"title":{},"body":{"components/ModalComponent.html":{}}}],["align",{"_index":433,"title":{},"body":{"components/CityComponent.html":{},"components/ModalComponent.html":{}}}],["alignment",{"_index":882,"title":{},"body":{"components/ModalComponent.html":{}}}],["allcities",{"_index":509,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["angular",{"_index":58,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"dependencies.html":{},"index.html":{}}}],["angular/animations",{"_index":986,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":920,"title":{},"body":{"modules/SharedModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"injectables/CityService.html":{},"classes/CustomTranslateLoader.html":{},"modules/SharedModule.html":{}}}],["angular/compiler",{"_index":988,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":81,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AppService.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"modules/SharedModule.html":{},"injectables/StorageService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":989,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":207,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"guards/CityResolverGuard.html":{},"components/HomeComponent.html":{},"dependencies.html":{}}}],["api",{"_index":561,"title":{},"body":{"injectables/CityService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["api.openweather.citiesweather.replace('{ids",{"_index":631,"title":{},"body":{"injectables/CityService.html":{}}}],["api.openweather.cityforecast.replace('{city",{"_index":636,"title":{},"body":{"injectables/CityService.html":{}}}],["api.openweather.cityweather.replace('{city",{"_index":577,"title":{},"body":{"injectables/CityService.html":{}}}],["apibaseurl:\"https://api.openweathermap.org",{"_index":1087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"index.html":{}}}],["app.component",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":42,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":40,"title":{},"body":{"components/AppComponent.html":{}}}],["app.service",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"guards/CityResolverGuard.html":{},"components/HomeComponent.html":{}}}],["app_initializer",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["appcomponent",{"_index":26,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"coverage.html":{},"overview.html":{}}}],["appid",{"_index":1088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appinitializer",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["appinitializer(translateservice",{"_index":1016,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appmodule",{"_index":125,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apppage",{"_index":192,"title":{"classes/AppPage.html":{}},"body":{"classes/AppPage.html":{},"coverage.html":{}}}],["approutingmodule",{"_index":137,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":43,"title":{"injectables/AppService.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"components/HomeComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["appservicemock",{"_index":230,"title":{"classes/AppServiceMock.html":{}},"body":{"classes/AppServiceMock.html":{},"coverage.html":{}}}],["array",{"_index":556,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["array).map(city",{"_index":634,"title":{},"body":{"injectables/CityService.html":{}}}],["artifacts",{"_index":1037,"title":{},"body":{"index.html":{}}}],["assets/data/cities.json",{"_index":1084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["atmospheric",{"_index":802,"title":{},"body":{"interfaces/IMain.html":{}}}],["auto",{"_index":909,"title":{},"body":{"components/ModalComponent.html":{}}}],["automatically",{"_index":1029,"title":{},"body":{"index.html":{}}}],["available",{"_index":1061,"title":{},"body":{"modules.html":{}}}],["avoid",{"_index":904,"title":{},"body":{"components/ModalComponent.html":{}}}],["block",{"_index":324,"title":{},"body":{"components/CityCardComponent.html":{},"components/CityComponent.html":{}}}],["boolean",{"_index":226,"title":{},"body":{"injectables/AppService.html":{},"classes/AppServiceMock.html":{}}}],["bootstrap",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"components/ModalComponent.html":{},"modules/SharedModule.html":{},"dependencies.html":{},"overview.html":{}}}],["bootstrap/modal",{"_index":865,"title":{},"body":{"components/ModalComponent.html":{}}}],["border",{"_index":879,"title":{},"body":{"components/ModalComponent.html":{}}}],["bottom",{"_index":880,"title":{},"body":{"components/ModalComponent.html":{}}}],["box",{"_index":333,"title":{},"body":{"components/CityCardComponent.html":{}}}],["browse",{"_index":1059,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPage.html":{},"dependencies.html":{},"modules.html":{}}}],["browser.get(browser.baseurl",{"_index":199,"title":{},"body":{"classes/AppPage.html":{}}}],["browsermodule",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["bsmodalservice",{"_index":845,"title":{},"body":{"components/ModalComponent.html":{}}}],["build",{"_index":1036,"title":{},"body":{"index.html":{}}}],["c",{"_index":319,"title":{},"body":{"components/CityCardComponent.html":{}}}],["calculation",{"_index":775,"title":{},"body":{"interfaces/ICity.html":{},"interfaces/IForecast.html":{}}}],["card",{"_index":278,"title":{},"body":{"components/CityCardComponent.html":{},"components/CityComponent.html":{},"injectables/CityService.html":{}}}],["card'},{'name",{"_index":114,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["card.component",{"_index":922,"title":{},"body":{"modules/SharedModule.html":{}}}],["card.component.html",{"_index":280,"title":{},"body":{"components/CityCardComponent.html":{}}}],["card.component.scss",{"_index":279,"title":{},"body":{"components/CityCardComponent.html":{}}}],["card.component.ts",{"_index":277,"title":{},"body":{"components/CityCardComponent.html":{},"coverage.html":{}}}],["card.component.ts:10",{"_index":303,"title":{},"body":{"components/CityCardComponent.html":{}}}],["card.component.ts:11",{"_index":296,"title":{},"body":{"components/CityCardComponent.html":{}}}],["card.component.ts:12",{"_index":300,"title":{},"body":{"components/CityCardComponent.html":{}}}],["card.component.ts:13",{"_index":301,"title":{},"body":{"components/CityCardComponent.html":{}}}],["card.component.ts:14",{"_index":302,"title":{},"body":{"components/CityCardComponent.html":{}}}],["card.component.ts:15",{"_index":297,"title":{},"body":{"components/CityCardComponent.html":{}}}],["card.component.ts:16",{"_index":299,"title":{},"body":{"components/CityCardComponent.html":{}}}],["card.component.ts:17",{"_index":298,"title":{},"body":{"components/CityCardComponent.html":{}}}],["card.component.ts:18",{"_index":304,"title":{},"body":{"components/CityCardComponent.html":{}}}],["card.component.ts:20",{"_index":306,"title":{},"body":{"components/CityCardComponent.html":{}}}],["card.component.ts:21",{"_index":295,"title":{},"body":{"components/CityCardComponent.html":{}}}],["card.component.ts:25",{"_index":307,"title":{},"body":{"components/CityCardComponent.html":{}}}],["card.component.ts:28",{"_index":312,"title":{},"body":{"components/CityCardComponent.html":{}}}],["card.component.ts:32",{"_index":309,"title":{},"body":{"components/CityCardComponent.html":{}}}],["card/city",{"_index":276,"title":{},"body":{"components/CityCardComponent.html":{},"modules/SharedModule.html":{},"coverage.html":{}}}],["catch",{"_index":942,"title":{},"body":{"injectables/StorageService.html":{}}}],["categories",{"_index":412,"title":{},"body":{"components/CityComponent.html":{}}}],["cd",{"_index":846,"title":{},"body":{"components/ModalComponent.html":{}}}],["cell",{"_index":896,"title":{},"body":{"components/ModalComponent.html":{}}}],["celsius",{"_index":799,"title":{},"body":{"interfaces/IMain.html":{}}}],["center",{"_index":893,"title":{},"body":{"components/ModalComponent.html":{}}}],["change",{"_index":1031,"title":{},"body":{"index.html":{}}}],["changedetectorref",{"_index":847,"title":{},"body":{"components/ModalComponent.html":{}}}],["chart",{"_index":355,"title":{},"body":{"components/CityComponent.html":{}}}],["chartaxisdata",{"_index":408,"title":{},"body":{"components/CityComponent.html":{}}}],["chartdata",{"_index":407,"title":{},"body":{"components/CityComponent.html":{}}}],["chartmodule",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["chartoptions",{"_index":429,"title":{},"body":{"components/CityComponent.html":{}}}],["chat",{"_index":381,"title":{},"body":{"components/CityComponent.html":{}}}],["check",{"_index":1055,"title":{},"body":{"index.html":{}}}],["cities",{"_index":510,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/IMain.html":{},"miscellaneous/variables.html":{}}}],["citiesweather",{"_index":1078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["city",{"_index":95,"title":{"classes/City.html":{}},"body":{"components/AppComponent.html":{},"classes/City.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"components/HomeComponent.html":{},"interfaces/ICity.html":{},"interfaces/ICoord.html":{},"components/ModalComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["city'},{'name",{"_index":116,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["city).forecasts",{"_index":398,"title":{},"body":{"components/CityComponent.html":{}}}],["city.clouds",{"_index":591,"title":{},"body":{"injectables/CityService.html":{}}}],["city.code",{"_index":585,"title":{},"body":{"injectables/CityService.html":{}}}],["city.component.html",{"_index":354,"title":{},"body":{"components/CityComponent.html":{}}}],["city.component.scss",{"_index":353,"title":{},"body":{"components/CityComponent.html":{}}}],["city.coord",{"_index":593,"title":{},"body":{"injectables/CityService.html":{}}}],["city.countrycode",{"_index":587,"title":{},"body":{"injectables/CityService.html":{}}}],["city.dct",{"_index":589,"title":{},"body":{"injectables/CityService.html":{}}}],["city.forecasts",{"_index":641,"title":{},"body":{"injectables/CityService.html":{}}}],["city.forecasts.push(forecast",{"_index":655,"title":{},"body":{"injectables/CityService.html":{}}}],["city.humidity",{"_index":451,"title":{},"body":{"components/CityComponent.html":{}}}],["city.id",{"_index":580,"title":{},"body":{"injectables/CityService.html":{}}}],["city.mainfeature",{"_index":598,"title":{},"body":{"injectables/CityService.html":{}}}],["city.mainfeature.humidity}}{{\"city.unit.percentage",{"_index":452,"title":{},"body":{"components/CityComponent.html":{}}}],["city.mainfeature.pressure",{"_index":449,"title":{},"body":{"components/CityComponent.html":{}}}],["city.mainfeature.temp",{"_index":442,"title":{},"body":{"components/CityComponent.html":{}}}],["city.mainfeature.tempmax}}{{\"city.unit.degree",{"_index":445,"title":{},"body":{"components/CityComponent.html":{}}}],["city.mainfeature.tempmin}}{{\"city.unit.degree",{"_index":446,"title":{},"body":{"components/CityComponent.html":{}}}],["city.name",{"_index":441,"title":{},"body":{"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"injectables/CityService.html":{}}}],["city.pressure",{"_index":448,"title":{},"body":{"components/CityComponent.html":{}}}],["city.sunrise",{"_index":614,"title":{},"body":{"injectables/CityService.html":{}}}],["city.sunset",{"_index":617,"title":{},"body":{"injectables/CityService.html":{}}}],["city.unit.celsius",{"_index":443,"title":{},"body":{"components/CityComponent.html":{}}}],["city.unit.pressure",{"_index":450,"title":{},"body":{"components/CityComponent.html":{}}}],["city.unit.wind",{"_index":455,"title":{},"body":{"components/CityComponent.html":{}}}],["city.weather",{"_index":621,"title":{},"body":{"injectables/CityService.html":{}}}],["city.weather.push(weather",{"_index":630,"title":{},"body":{"injectables/CityService.html":{}}}],["city.weather[0].main",{"_index":444,"title":{},"body":{"components/CityComponent.html":{}}}],["city.wind",{"_index":453,"title":{},"body":{"components/CityComponent.html":{},"injectables/CityService.html":{}}}],["city.wind.deg}}{{\"city.unit.degree",{"_index":456,"title":{},"body":{"components/CityComponent.html":{}}}],["city.wind.speed",{"_index":454,"title":{},"body":{"components/CityComponent.html":{}}}],["city/:id",{"_index":212,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["city/city",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["city/city.component",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["citycardcomponent",{"_index":113,"title":{"components/CityCardComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"modules/SharedModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["citycode",{"_index":284,"title":{},"body":{"components/CityCardComponent.html":{}}}],["citycomponent",{"_index":115,"title":{"components/CityComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"coverage.html":{},"overview.html":{}}}],["citydropdowncomponent",{"_index":84,"title":{"components/CityDropDownComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"modules/SharedModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["cityforecast",{"_index":1076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cityid",{"_index":356,"title":{},"body":{"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["cityresolverguard",{"_index":173,"title":{"guards/CityResolverGuard.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/CityResolverGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cityservice",{"_index":139,"title":{"injectables/CityService.html":{}},"body":{"modules/AppModule.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"components/HomeComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["cityservicemock",{"_index":685,"title":{"classes/CityServiceMock.html":{}},"body":{"classes/CityServiceMock.html":{},"coverage.html":{}}}],["cityweather",{"_index":1072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":0,"title":{"classes/ActivatedRouteServiceMock.html":{},"classes/AppPage.html":{},"classes/AppServiceMock.html":{},"classes/City.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"classes/Forecast.html":{},"classes/RouterServiceMock.html":{}},"body":{"classes/ActivatedRouteServiceMock.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"classes/City.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{},"classes/Forecast.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"classes/RouterServiceMock.html":{},"modules/SharedModule.html":{},"injectables/StorageService.html":{},"coverage.html":{}}}],["class*=\"city",{"_index":350,"title":{},"body":{"components/CityCardComponent.html":{},"components/CityComponent.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"classes/AppPage.html":{},"classes/AppServiceMock.html":{},"classes/City.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"classes/Forecast.html":{},"classes/RouterServiceMock.html":{},"overview.html":{}}}],["cli",{"_index":1020,"title":{},"body":{"index.html":{}}}],["click",{"_index":891,"title":{},"body":{"components/ModalComponent.html":{}}}],["close",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{}}}],["cloudiness",{"_index":774,"title":{},"body":{"interfaces/ICity.html":{},"interfaces/IForecast.html":{}}}],["clouds",{"_index":236,"title":{},"body":{"classes/City.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/Forecast.html":{},"interfaces/ICity.html":{},"interfaces/IForecast.html":{},"miscellaneous/variables.html":{}}}],["clouds.all",{"_index":1097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_sharedmodule",{"_index":915,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_declarations",{"_index":916,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_exports",{"_index":917,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cod",{"_index":1090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["code",{"_index":237,"title":{},"body":{"classes/City.html":{},"classes/CityServiceMock.html":{},"interfaces/ICity.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["color",{"_index":329,"title":{},"body":{"components/CityCardComponent.html":{},"components/CityComponent.html":{}}}],["common.addcity.btn",{"_index":490,"title":{},"body":{"components/CityDropDownComponent.html":{}}}],["common.addcity.select",{"_index":489,"title":{},"body":{"components/CityDropDownComponent.html":{}}}],["common.addcity.selectcity",{"_index":488,"title":{},"body":{"components/CityDropDownComponent.html":{}}}],["common.countries.'+city.countrycode",{"_index":447,"title":{},"body":{"components/CityComponent.html":{}}}],["common.countries.\\'+city.countrycode",{"_index":470,"title":{},"body":{"components/CityComponent.html":{}}}],["common.home",{"_index":104,"title":{},"body":{"components/AppComponent.html":{}}}],["commonmodule",{"_index":919,"title":{},"body":{"modules/SharedModule.html":{}}}],["component",{"_index":25,"title":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"classes/DynamicComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":111,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["componentfactory",{"_index":728,"title":{},"body":{"classes/DynamicComponent.html":{}}}],["componentfactoryresolver",{"_index":726,"title":{},"body":{"classes/DynamicComponent.html":{},"components/ModalComponent.html":{}}}],["componentfactoryresolver.resolvecomponentfactory(component",{"_index":729,"title":{},"body":{"classes/DynamicComponent.html":{}}}],["componentref",{"_index":731,"title":{},"body":{"classes/DynamicComponent.html":{}}}],["components",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"modules/SharedModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["components/city",{"_index":921,"title":{},"body":{"modules/SharedModule.html":{}}}],["components/modal/modal.component",{"_index":924,"title":{},"body":{"modules/SharedModule.html":{}}}],["condition",{"_index":420,"title":{},"body":{"components/CityComponent.html":{},"interfaces/ICity.html":{},"interfaces/IForecast.html":{},"interfaces/IWeather.html":{}}}],["config",{"_index":563,"title":{},"body":{"injectables/CityService.html":{}}}],["config.ts",{"_index":969,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["const",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/CityService.html":{},"classes/DynamicComponent.html":{},"modules/SharedModule.html":{},"injectables/StorageService.html":{}}}],["constants/defines",{"_index":570,"title":{},"body":{"injectables/CityService.html":{}}}],["constants/routes",{"_index":562,"title":{},"body":{"injectables/CityService.html":{}}}],["constructor",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"injectables/AppService.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/StorageService.html":{}}}],["constructor(appservice",{"_index":49,"title":{},"body":{"components/AppComponent.html":{}}}],["constructor(cityservice",{"_index":359,"title":{},"body":{"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"components/HomeComponent.html":{}}}],["constructor(http",{"_index":519,"title":{},"body":{"injectables/CityService.html":{},"classes/CustomTranslateLoader.html":{}}}],["constructor(modalservice",{"_index":844,"title":{},"body":{"components/ModalComponent.html":{}}}],["constructor(private",{"_index":503,"title":{},"body":{"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"components/ModalComponent.html":{}}}],["constructor(public",{"_index":91,"title":{},"body":{"components/AppComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"directives/DynamicContentDirective.html":{},"components/HomeComponent.html":{}}}],["constructor(viewcontainerref",{"_index":735,"title":{},"body":{"directives/DynamicContentDirective.html":{}}}],["container",{"_index":321,"title":{},"body":{"components/CityCardComponent.html":{},"components/CityComponent.html":{},"classes/DynamicComponent.html":{},"components/ModalComponent.html":{}}}],["container.clear",{"_index":730,"title":{},"body":{"classes/DynamicComponent.html":{}}}],["container.createcomponent(componentfactory",{"_index":732,"title":{},"body":{"classes/DynamicComponent.html":{}}}],["content",{"_index":867,"title":{},"body":{"components/ModalComponent.html":{}}}],["content.directive",{"_index":869,"title":{},"body":{"components/ModalComponent.html":{},"modules/SharedModule.html":{}}}],["content.directive.ts",{"_index":734,"title":{},"body":{"directives/DynamicContentDirective.html":{},"coverage.html":{}}}],["content.directive.ts:4",{"_index":736,"title":{},"body":{"directives/DynamicContentDirective.html":{}}}],["content.directive.ts:5",{"_index":737,"title":{},"body":{"directives/DynamicContentDirective.html":{}}}],["content.ts",{"_index":721,"title":{},"body":{"classes/DynamicComponent.html":{},"coverage.html":{}}}],["content.ts:4",{"_index":723,"title":{},"body":{"classes/DynamicComponent.html":{}}}],["content.ts:9",{"_index":727,"title":{},"body":{"classes/DynamicComponent.html":{}}}],["context",{"_index":982,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["coord",{"_index":238,"title":{},"body":{"classes/City.html":{},"classes/CityServiceMock.html":{},"interfaces/ICity.html":{}}}],["coord.lat",{"_index":1091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coord.lon",{"_index":1093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["core",{"_index":996,"title":{},"body":{"dependencies.html":{}}}],["country",{"_index":285,"title":{},"body":{"components/CityCardComponent.html":{},"components/CityComponent.html":{},"interfaces/ICity.html":{},"miscellaneous/variables.html":{}}}],["countrycode",{"_index":239,"title":{},"body":{"classes/City.html":{},"classes/CityServiceMock.html":{},"interfaces/ICity.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":950,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createtranslateloader",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["createtranslateloader(http",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["credits",{"_index":416,"title":{},"body":{"components/CityComponent.html":{}}}],["crosshairs",{"_index":414,"title":{},"body":{"components/CityComponent.html":{}}}],["current",{"_index":365,"title":{},"body":{"components/CityComponent.html":{},"interfaces/IMain.html":{}}}],["cursor",{"_index":343,"title":{},"body":{"components/CityCardComponent.html":{}}}],["custom",{"_index":77,"title":{},"body":{"components/AppComponent.html":{}}}],["customhttp",{"_index":705,"title":{},"body":{"classes/CustomTranslateLoader.html":{}}}],["customtranslateloader",{"_index":157,"title":{"classes/CustomTranslateLoader.html":{}},"body":{"modules/AppModule.html":{},"classes/CustomTranslateLoader.html":{},"coverage.html":{}}}],["customtranslateloader(http",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["data",{"_index":382,"title":{},"body":{"components/CityComponent.html":{},"injectables/CityService.html":{},"interfaces/ICity.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"miscellaneous/variables.html":{}}}],["data/2.5/forecast?id={city}&units=metric&appid",{"_index":1077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data/2.5/group?id={ids}&units=metric&appid",{"_index":1079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data/2.5/weather?id={city}&units=metric&appid",{"_index":1074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":255,"title":{},"body":{"classes/City.html":{},"components/CityComponent.html":{},"classes/CityServiceMock.html":{},"interfaces/ICity.html":{}}}],["date(jsonquery.value(item",{"_index":616,"title":{},"body":{"injectables/CityService.html":{}}}],["date(time",{"_index":404,"title":{},"body":{"components/CityComponent.html":{}}}],["date.gethours",{"_index":405,"title":{},"body":{"components/CityComponent.html":{}}}],["dct",{"_index":240,"title":{},"body":{"classes/City.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/Forecast.html":{},"interfaces/ICity.html":{},"interfaces/IForecast.html":{}}}],["declarations",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{},"overview.html":{}}}],["decorators",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{}}}],["default",{"_index":12,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"components/AppComponent.html":{},"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/IMain.html":{},"interfaces/IWind.html":{},"components/ModalComponent.html":{},"miscellaneous/variables.html":{}}}],["defaultcities",{"_index":511,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"components/AppComponent.html":{},"classes/AppPage.html":{},"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"classes/City.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{},"classes/Forecast.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"classes/RouterServiceMock.html":{},"injectables/StorageService.html":{}}}],["deg",{"_index":610,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/IWind.html":{}}}],["degrees",{"_index":833,"title":{},"body":{"interfaces/IWind.html":{}}}],["deletecity",{"_index":750,"title":{},"body":{"components/HomeComponent.html":{}}}],["deletecity(id",{"_index":754,"title":{},"body":{"components/HomeComponent.html":{}}}],["deleted",{"_index":557,"title":{},"body":{"injectables/CityService.html":{}}}],["deletedcard",{"_index":293,"title":{},"body":{"components/CityCardComponent.html":{}}}],["deletedcity",{"_index":671,"title":{},"body":{"injectables/CityService.html":{}}}],["demanding",{"_index":427,"title":{},"body":{"components/CityComponent.html":{}}}],["dependencies",{"_index":127,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deps",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":371,"title":{},"body":{"components/CityComponent.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/IWeather.html":{},"miscellaneous/variables.html":{}}}],["details",{"_index":466,"title":{},"body":{"components/CityComponent.html":{}}}],["dev",{"_index":1027,"title":{},"body":{"index.html":{}}}],["development",{"_index":1023,"title":{},"body":{"index.html":{}}}],["deviation",{"_index":808,"title":{},"body":{"interfaces/IMain.html":{}}}],["dialog",{"_index":898,"title":{},"body":{"components/ModalComponent.html":{}}}],["direction",{"_index":832,"title":{},"body":{"interfaces/IWind.html":{}}}],["directions",{"_index":782,"title":{},"body":{"interfaces/ICity.html":{},"interfaces/IForecast.html":{}}}],["directive",{"_index":109,"title":{"directives/DynamicContentDirective.html":{}},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"directives/DynamicContentDirective.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"coverage.html":{},"overview.html":{}}}],["directives",{"_index":120,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"directives/DynamicContentDirective.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"modules/SharedModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["directives/dynamic",{"_index":868,"title":{},"body":{"components/ModalComponent.html":{},"modules/SharedModule.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":1035,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1040,"title":{},"body":{"index.html":{}}}],["display",{"_index":322,"title":{},"body":{"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/ModalComponent.html":{}}}],["display:table",{"_index":884,"title":{},"body":{"components/ModalComponent.html":{}}}],["displaychart",{"_index":357,"title":{},"body":{"components/CityComponent.html":{}}}],["displayed",{"_index":385,"title":{},"body":{"components/CityComponent.html":{}}}],["dist",{"_index":1039,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":951,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["down",{"_index":96,"title":{},"body":{"components/AppComponent.html":{},"components/CityDropDownComponent.html":{}}}],["down'},{'name",{"_index":117,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["down.component",{"_index":88,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/HomeComponent.html":{},"modules/SharedModule.html":{}}}],["down.component.html",{"_index":474,"title":{},"body":{"components/CityDropDownComponent.html":{}}}],["down.component.scss",{"_index":473,"title":{},"body":{"components/CityDropDownComponent.html":{}}}],["down.component.ts",{"_index":472,"title":{},"body":{"components/CityDropDownComponent.html":{},"coverage.html":{}}}],["down.component.ts:11",{"_index":477,"title":{},"body":{"components/CityDropDownComponent.html":{}}}],["down.component.ts:12",{"_index":482,"title":{},"body":{"components/CityDropDownComponent.html":{}}}],["down.component.ts:14",{"_index":479,"title":{},"body":{"components/CityDropDownComponent.html":{}}}],["down.component.ts:16",{"_index":481,"title":{},"body":{"components/CityDropDownComponent.html":{}}}],["down.component.ts:19",{"_index":478,"title":{},"body":{"components/CityDropDownComponent.html":{}}}],["down/city",{"_index":87,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"modules/SharedModule.html":{},"coverage.html":{}}}],["drop",{"_index":86,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"modules/SharedModule.html":{},"coverage.html":{}}}],["dt",{"_index":1094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dt_txt",{"_index":1096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dttext",{"_index":1095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamic",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"dependencies.html":{}}}],["dynamiccomponent",{"_index":719,"title":{"classes/DynamicComponent.html":{}},"body":{"classes/DynamicComponent.html":{},"components/ModalComponent.html":{},"coverage.html":{}}}],["dynamiccontent",{"_index":122,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"directives/DynamicContentDirective.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["dynamiccontentdirective",{"_index":121,"title":{"directives/DynamicContentDirective.html":{}},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"directives/DynamicContentDirective.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"modules/SharedModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["e",{"_index":310,"title":{},"body":{"components/CityCardComponent.html":{}}}],["e.stoppropagation",{"_index":316,"title":{},"body":{"components/CityCardComponent.html":{}}}],["e2e",{"_index":1050,"title":{},"body":{"index.html":{}}}],["e2e/src/app.po.ts",{"_index":193,"title":{},"body":{"classes/AppPage.html":{},"coverage.html":{}}}],["e2e/src/app.po.ts:4",{"_index":197,"title":{},"body":{"classes/AppPage.html":{}}}],["e2e/src/app.po.ts:8",{"_index":196,"title":{},"body":{"classes/AppPage.html":{}}}],["ease",{"_index":346,"title":{},"body":{"components/CityCardComponent.html":{}}}],["el.id",{"_index":663,"title":{},"body":{"injectables/CityService.html":{}}}],["el[json_paths.city.rain",{"_index":647,"title":{},"body":{"injectables/CityService.html":{}}}],["el[json_paths.city.rain][json_paths.city._1h",{"_index":648,"title":{},"body":{"injectables/CityService.html":{}}}],["el[json_paths.city.snow",{"_index":650,"title":{},"body":{"injectables/CityService.html":{}}}],["el[json_paths.city.snow][json_paths.city._1h",{"_index":651,"title":{},"body":{"injectables/CityService.html":{}}}],["element",{"_index":108,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["element(by.css('app",{"_index":201,"title":{},"body":{"classes/AppPage.html":{}}}],["enabled",{"_index":417,"title":{},"body":{"components/CityComponent.html":{}}}],["end",{"_index":1049,"title":{},"body":{"index.html":{}}}],["entry_components",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["entrycomponents",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":979,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment.apibaseurl",{"_index":1073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["environment.appid",{"_index":1075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":401,"title":{},"body":{"components/CityComponent.html":{},"injectables/StorageService.html":{}}}],["etc",{"_index":780,"title":{},"body":{"interfaces/ICity.html":{},"interfaces/IWeather.html":{}}}],["eventemitter",{"_index":305,"title":{},"body":{"components/CityCardComponent.html":{}}}],["events",{"_index":910,"title":{},"body":{"components/ModalComponent.html":{}}}],["events:none",{"_index":887,"title":{},"body":{"components/ModalComponent.html":{}}}],["example",{"_index":373,"title":{},"body":{"components/CityComponent.html":{}}}],["execute",{"_index":1046,"title":{},"body":{"index.html":{}}}],["expanded",{"_index":813,"title":{},"body":{"interfaces/IMain.html":{}}}],["export",{"_index":21,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"classes/City.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{},"classes/Forecast.html":{},"components/HomeComponent.html":{},"interfaces/ICity.html":{},"interfaces/ICoord.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"interfaces/IVolume.html":{},"interfaces/IWeather.html":{},"interfaces/IWind.html":{},"components/ModalComponent.html":{},"classes/RouterServiceMock.html":{},"modules/SharedModule.html":{},"injectables/StorageService.html":{}}}],["exports",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/SharedModule.html":{},"overview.html":{}}}],["express",{"_index":999,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":703,"title":{},"body":{"classes/CustomTranslateLoader.html":{}}}],["extreme",{"_index":827,"title":{},"body":{"interfaces/IWeather.html":{}}}],["fahrenheit",{"_index":801,"title":{},"body":{"interfaces/IMain.html":{}}}],["false",{"_index":227,"title":{},"body":{"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"components/CityComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"classes/City.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{},"classes/Forecast.html":{},"components/HomeComponent.html":{},"interfaces/ICity.html":{},"interfaces/ICoord.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"interfaces/IVolume.html":{},"interfaces/IWeather.html":{},"interfaces/IWind.html":{},"components/ModalComponent.html":{},"classes/RouterServiceMock.html":{},"modules/SharedModule.html":{},"injectables/StorageService.html":{},"coverage.html":{}}}],["files",{"_index":1032,"title":{},"body":{"index.html":{}}}],["fires",{"_index":67,"title":{},"body":{"components/AppComponent.html":{}}}],["flag",{"_index":286,"title":{},"body":{"components/CityCardComponent.html":{},"index.html":{}}}],["flags",{"_index":1082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["font",{"_index":326,"title":{},"body":{"components/CityCardComponent.html":{},"components/CityComponent.html":{}}}],["forecast",{"_index":257,"title":{"classes/Forecast.html":{}},"body":{"classes/City.html":{},"components/CityComponent.html":{},"injectables/CityService.html":{},"classes/Forecast.html":{},"interfaces/IForecast.html":{},"coverage.html":{}}}],["forecast.weather",{"_index":652,"title":{},"body":{"injectables/CityService.html":{}}}],["forecast.weather.push(weather",{"_index":654,"title":{},"body":{"injectables/CityService.html":{}}}],["forecastcountrycode",{"_index":1119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forecasts",{"_index":241,"title":{},"body":{"classes/City.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"miscellaneous/variables.html":{}}}],["forecasts.map(el",{"_index":642,"title":{},"body":{"injectables/CityService.html":{}}}],["formatter",{"_index":430,"title":{},"body":{"components/CityComponent.html":{}}}],["full",{"_index":210,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/ModalComponent.html":{}}}],["function",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"components/CityComponent.html":{},"coverage.html":{}}}],["functions",{"_index":1013,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":1051,"title":{},"body":{"index.html":{}}}],["gb",{"_index":778,"title":{},"body":{"interfaces/ICity.html":{}}}],["generate",{"_index":1034,"title":{},"body":{"index.html":{}}}],["generated",{"_index":1019,"title":{},"body":{"index.html":{}}}],["geo",{"_index":787,"title":{},"body":{"interfaces/ICity.html":{},"interfaces/ICoord.html":{}}}],["geographically",{"_index":812,"title":{},"body":{"interfaces/IMain.html":{}}}],["getcities",{"_index":214,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["getcitiesweather",{"_index":513,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["getcitiesweather(ids",{"_index":531,"title":{},"body":{"injectables/CityService.html":{}}}],["getcityforecast",{"_index":514,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["getcityforecast(cityid",{"_index":535,"title":{},"body":{"injectables/CityService.html":{}}}],["getcityweather",{"_index":515,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["getcityweather(cityid",{"_index":539,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["getlocalstorage",{"_index":929,"title":{},"body":{"injectables/StorageService.html":{}}}],["getlocalstorage(key",{"_index":933,"title":{},"body":{"injectables/StorageService.html":{}}}],["getselectedcities",{"_index":516,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["getselectedcities(ids",{"_index":544,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["getting",{"_index":525,"title":{"index.html":{}},"body":{"injectables/CityService.html":{}}}],["gettitletext",{"_index":194,"title":{},"body":{"classes/AppPage.html":{}}}],["gettranslation",{"_index":706,"title":{},"body":{"classes/CustomTranslateLoader.html":{}}}],["gettranslation(lang",{"_index":711,"title":{},"body":{"classes/CustomTranslateLoader.html":{}}}],["go",{"_index":1054,"title":{},"body":{"index.html":{}}}],["graph",{"_index":1060,"title":{},"body":{"modules.html":{}}}],["grnd_level",{"_index":601,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/ICity.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"miscellaneous/variables.html":{}}}],["ground",{"_index":818,"title":{},"body":{"interfaces/IMain.html":{}}}],["group",{"_index":826,"title":{},"body":{"interfaces/IWeather.html":{}}}],["guard",{"_index":491,"title":{"guards/CityResolverGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":492,"title":{},"body":{"guards/CityResolverGuard.html":{}}}],["h1')).gettext",{"_index":202,"title":{},"body":{"classes/AppPage.html":{}}}],["handle",{"_index":62,"title":{},"body":{"components/AppComponent.html":{}}}],["header",{"_index":878,"title":{},"body":{"components/ModalComponent.html":{}}}],["height",{"_index":885,"title":{},"body":{"components/ModalComponent.html":{}}}],["height:inherit",{"_index":907,"title":{},"body":{"components/ModalComponent.html":{}}}],["help",{"_index":1052,"title":{},"body":{"index.html":{}}}],["helper",{"_index":883,"title":{},"body":{"components/ModalComponent.html":{}}}],["hidemodal",{"_index":220,"title":{},"body":{"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"components/ModalComponent.html":{}}}],["highcharts",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"components/CityComponent.html":{},"dependencies.html":{}}}],["home",{"_index":211,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/CityService.html":{},"components/HomeComponent.html":{},"miscellaneous/variables.html":{}}}],["home'},{'name",{"_index":119,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["home.addbutton",{"_index":765,"title":{},"body":{"components/HomeComponent.html":{}}}],["home.component.html",{"_index":749,"title":{},"body":{"components/HomeComponent.html":{}}}],["home.component.scss",{"_index":748,"title":{},"body":{"components/HomeComponent.html":{}}}],["home.nocities",{"_index":766,"title":{},"body":{"components/HomeComponent.html":{}}}],["home/home.component",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["homecomponent",{"_index":118,"title":{"components/HomeComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"coverage.html":{},"overview.html":{}}}],["hook",{"_index":59,"title":{},"body":{"components/AppComponent.html":{}}}],["horizontally",{"_index":908,"title":{},"body":{"components/ModalComponent.html":{}}}],["hour",{"_index":822,"title":{},"body":{"interfaces/IVolume.html":{}}}],["hours",{"_index":370,"title":{},"body":{"components/CityComponent.html":{}}}],["hover",{"_index":332,"title":{},"body":{"components/CityCardComponent.html":{}}}],["hpa",{"_index":805,"title":{},"body":{"interfaces/IMain.html":{}}}],["html",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["http",{"_index":521,"title":{},"body":{"injectables/CityService.html":{},"classes/CustomTranslateLoader.html":{},"miscellaneous/functions.html":{}}}],["http://localhost:4200",{"_index":1028,"title":{},"body":{"index.html":{}}}],["http://openweathermap.org/img/w/{icon}.png",{"_index":1081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpclient",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"injectables/CityService.html":{},"classes/CustomTranslateLoader.html":{},"miscellaneous/variables.html":{}}}],["httpclientmodule",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{}}}],["https://www.countryflags.io/{country}/flat/64.png",{"_index":1083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["humidity",{"_index":599,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/ICity.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"miscellaneous/variables.html":{}}}],["i18n",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["icity",{"_index":235,"title":{"interfaces/ICity.html":{}},"body":{"classes/City.html":{},"interfaces/ICity.html":{},"coverage.html":{}}}],["icon",{"_index":625,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/IWeather.html":{},"miscellaneous/variables.html":{}}}],["icons",{"_index":1080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icoord",{"_index":770,"title":{"interfaces/ICoord.html":{}},"body":{"interfaces/ICity.html":{},"interfaces/ICoord.html":{},"coverage.html":{}}}],["id",{"_index":15,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"classes/City.html":{},"components/CityComponent.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"components/HomeComponent.html":{},"interfaces/ICity.html":{},"interfaces/IWeather.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":952,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":533,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["ids.findindex(item",{"_index":680,"title":{},"body":{"injectables/CityService.html":{}}}],["ids.push(+id",{"_index":676,"title":{},"body":{"injectables/CityService.html":{}}}],["ids.splice(cityid",{"_index":681,"title":{},"body":{"injectables/CityService.html":{}}}],["if(!this.defaultcities",{"_index":674,"title":{},"body":{"injectables/CityService.html":{}}}],["iforecast",{"_index":739,"title":{"interfaces/IForecast.html":{}},"body":{"classes/Forecast.html":{},"interfaces/IForecast.html":{},"coverage.html":{}}}],["imain",{"_index":771,"title":{"interfaces/IMain.html":{}},"body":{"interfaces/ICity.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"coverage.html":{}}}],["img",{"_index":460,"title":{},"body":{"components/CityComponent.html":{}}}],["imperial",{"_index":800,"title":{},"body":{"interfaces/IMain.html":{},"interfaces/IWind.html":{}}}],["implements",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"classes/City.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"classes/Forecast.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["import",{"_index":19,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"classes/City.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{},"classes/Forecast.html":{},"components/HomeComponent.html":{},"interfaces/ICity.html":{},"interfaces/IForecast.html":{},"components/ModalComponent.html":{},"modules/SharedModule.html":{},"injectables/StorageService.html":{}}}],["import(\"../interface/icoord\").icoord",{"_index":274,"title":{},"body":{"classes/City.html":{}}}],["import(\"../interface/imain\").imain",{"_index":272,"title":{},"body":{"classes/City.html":{},"classes/Forecast.html":{}}}],["import(\"../interface/ivolume\").ivolume",{"_index":270,"title":{},"body":{"classes/City.html":{},"classes/Forecast.html":{}}}],["import(\"../interface/iweather\").iweather",{"_index":273,"title":{},"body":{"classes/City.html":{},"classes/Forecast.html":{}}}],["import(\"../interface/iwind\").iwind",{"_index":271,"title":{},"body":{"classes/City.html":{},"classes/Forecast.html":{}}}],["imports",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/SharedModule.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/ActivatedRouteServiceMock.html":{},"components/AppComponent.html":{},"classes/AppPage.html":{},"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"classes/City.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{},"classes/Forecast.html":{},"components/HomeComponent.html":{},"interfaces/ICity.html":{},"interfaces/ICoord.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"interfaces/IVolume.html":{},"interfaces/IWeather.html":{},"interfaces/IWind.html":{},"components/ModalComponent.html":{},"classes/RouterServiceMock.html":{},"injectables/StorageService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"classes/City.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{},"classes/Forecast.html":{},"components/HomeComponent.html":{},"interfaces/ICity.html":{},"interfaces/ICoord.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"interfaces/IVolume.html":{},"interfaces/IWeather.html":{},"interfaces/IWind.html":{},"components/ModalComponent.html":{},"classes/RouterServiceMock.html":{},"modules/SharedModule.html":{},"injectables/StorageService.html":{}}}],["inherit",{"_index":900,"title":{},"body":{"components/ModalComponent.html":{}}}],["init",{"_index":61,"title":{},"body":{"components/AppComponent.html":{}}}],["initializer",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["initializer.ts",{"_index":976,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["injectable",{"_index":217,"title":{"injectables/AppService.html":{},"injectables/CityService.html":{},"injectables/StorageService.html":{}},"body":{"injectables/AppService.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"injectables/StorageService.html":{},"coverage.html":{}}}],["injectables",{"_index":218,"title":{},"body":{"injectables/AppService.html":{},"injectables/CityService.html":{},"injectables/StorageService.html":{},"overview.html":{}}}],["inline",{"_index":323,"title":{},"body":{"components/CityCardComponent.html":{},"components/CityComponent.html":{}}}],["input",{"_index":313,"title":{},"body":{"components/CityCardComponent.html":{},"components/CityDropDownComponent.html":{},"components/ModalComponent.html":{}}}],["inputs",{"_index":283,"title":{},"body":{"components/CityCardComponent.html":{},"components/ModalComponent.html":{}}}],["interface",{"_index":767,"title":{"interfaces/ICity.html":{},"interfaces/ICoord.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"interfaces/IVolume.html":{},"interfaces/IWeather.html":{},"interfaces/IWind.html":{}},"body":{"interfaces/ICity.html":{},"interfaces/ICoord.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"interfaces/IVolume.html":{},"interfaces/IWeather.html":{},"interfaces/IWind.html":{},"coverage.html":{}}}],["interface/icity",{"_index":269,"title":{},"body":{"classes/City.html":{}}}],["interface/iforecast",{"_index":746,"title":{},"body":{"classes/Forecast.html":{}}}],["interface/iweather",{"_index":572,"title":{},"body":{"injectables/CityService.html":{}}}],["interfaces",{"_index":768,"title":{},"body":{"interfaces/ICity.html":{},"interfaces/ICoord.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"interfaces/IVolume.html":{},"interfaces/IWeather.html":{},"interfaces/IWind.html":{},"overview.html":{}}}],["isloadcontent",{"_index":838,"title":{},"body":{"components/ModalComponent.html":{}}}],["ismodalshown",{"_index":839,"title":{},"body":{"components/ModalComponent.html":{}}}],["it's",{"_index":526,"title":{},"body":{"injectables/CityService.html":{}}}],["item",{"_index":537,"title":{},"body":{"injectables/CityService.html":{}}}],["item.id",{"_index":395,"title":{},"body":{"components/CityComponent.html":{},"injectables/CityService.html":{}}}],["ivolume",{"_index":772,"title":{"interfaces/IVolume.html":{}},"body":{"interfaces/ICity.html":{},"interfaces/IForecast.html":{},"interfaces/IVolume.html":{},"coverage.html":{}}}],["iweather",{"_index":571,"title":{"interfaces/IWeather.html":{}},"body":{"injectables/CityService.html":{},"interfaces/ICity.html":{},"interfaces/IForecast.html":{},"interfaces/IWeather.html":{},"coverage.html":{}}}],["iwind",{"_index":773,"title":{"interfaces/IWind.html":{}},"body":{"interfaces/ICity.html":{},"interfaces/IForecast.html":{},"interfaces/IWind.html":{},"coverage.html":{}}}],["jp",{"_index":779,"title":{},"body":{"interfaces/ICity.html":{}}}],["js",{"_index":997,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["json.parse(json.stringify(res",{"_index":659,"title":{},"body":{"injectables/CityService.html":{}}}],["json.parse(localstorage.getitem(key",{"_index":941,"title":{},"body":{"injectables/StorageService.html":{}}}],["json.stringify(value",{"_index":947,"title":{},"body":{"injectables/StorageService.html":{}}}],["json_paths",{"_index":569,"title":{},"body":{"injectables/CityService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["json_paths.city.city",{"_index":639,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.clouds",{"_index":592,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.code",{"_index":586,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.countrycode",{"_index":588,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.dt",{"_index":590,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.dttext",{"_index":643,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.forecasts",{"_index":640,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.grnd_level",{"_index":602,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.humidity",{"_index":600,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.id",{"_index":582,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.lat",{"_index":597,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.lon",{"_index":595,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.name",{"_index":584,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.pressure",{"_index":606,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.sea_level",{"_index":604,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.sunrise",{"_index":615,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.sunset",{"_index":618,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.temp",{"_index":607,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.temp_kf",{"_index":645,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.tempmax",{"_index":608,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.tempmin",{"_index":609,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.weather",{"_index":620,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.weatherdescription",{"_index":629,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.weathericon",{"_index":626,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.weatherid",{"_index":624,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.weathermain",{"_index":628,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.winddegree",{"_index":613,"title":{},"body":{"injectables/CityService.html":{}}}],["json_paths.city.windspeed",{"_index":611,"title":{},"body":{"injectables/CityService.html":{}}}],["jsonpath",{"_index":1002,"title":{},"body":{"dependencies.html":{}}}],["jsonpath/jsonpath",{"_index":568,"title":{},"body":{"injectables/CityService.html":{}}}],["jsonquery",{"_index":567,"title":{},"body":{"injectables/CityService.html":{}}}],["jsonquery.value(el",{"_index":623,"title":{},"body":{"injectables/CityService.html":{}}}],["jsonquery.value(item",{"_index":581,"title":{},"body":{"injectables/CityService.html":{}}}],["jsonquery.value(response",{"_index":638,"title":{},"body":{"injectables/CityService.html":{}}}],["karma",{"_index":1048,"title":{},"body":{"index.html":{}}}],["kelvin",{"_index":797,"title":{},"body":{"interfaces/IMain.html":{}}}],["key",{"_index":935,"title":{},"body":{"injectables/StorageService.html":{}}}],["labels",{"_index":424,"title":{},"body":{"components/CityComponent.html":{}}}],["lang",{"_index":713,"title":{},"body":{"classes/CustomTranslateLoader.html":{}}}],["large",{"_index":810,"title":{},"body":{"interfaces/IMain.html":{}}}],["last",{"_index":821,"title":{},"body":{"interfaces/IVolume.html":{}}}],["lat",{"_index":596,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/ICoord.html":{},"miscellaneous/variables.html":{}}}],["latitude",{"_index":792,"title":{},"body":{"interfaces/ICoord.html":{}}}],["left",{"_index":434,"title":{},"body":{"components/CityComponent.html":{}}}],["legend",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"modules/SharedModule.html":{},"overview.html":{}}}],["less",{"_index":425,"title":{},"body":{"components/CityComponent.html":{}}}],["level",{"_index":804,"title":{},"body":{"interfaces/IMain.html":{}}}],["list",{"_index":530,"title":{},"body":{"injectables/CityService.html":{},"miscellaneous/variables.html":{}}}],["loader",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"classes/CustomTranslateLoader.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["loader.ts",{"_index":702,"title":{},"body":{"classes/CustomTranslateLoader.html":{},"coverage.html":{}}}],["loader.ts:11",{"_index":712,"title":{},"body":{"classes/CustomTranslateLoader.html":{}}}],["loader.ts:5",{"_index":709,"title":{},"body":{"classes/CustomTranslateLoader.html":{}}}],["localstorage",{"_index":944,"title":{},"body":{"injectables/StorageService.html":{}}}],["localstorage.getitem(key",{"_index":943,"title":{},"body":{"injectables/StorageService.html":{}}}],["localstorage.removeitem(key",{"_index":949,"title":{},"body":{"injectables/StorageService.html":{}}}],["localstorage.setitem(key",{"_index":946,"title":{},"body":{"injectables/StorageService.html":{}}}],["location",{"_index":788,"title":{},"body":{"interfaces/ICity.html":{},"interfaces/ICoord.html":{}}}],["lon",{"_index":1092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["long",{"_index":594,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/ICoord.html":{}}}],["longitude",{"_index":791,"title":{},"body":{"interfaces/ICoord.html":{}}}],["longitude,latitude",{"_index":789,"title":{},"body":{"interfaces/ICity.html":{}}}],["main",{"_index":627,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/IWeather.html":{},"miscellaneous/variables.html":{}}}],["main.grnd_level",{"_index":1100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main.humidity",{"_index":1098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main.pressure",{"_index":1101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main.sea_level",{"_index":1099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main.temp",{"_index":1102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main.temp_kf",{"_index":1105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main.temp_max",{"_index":1103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main.temp_min",{"_index":1104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mainfeature",{"_index":242,"title":{},"body":{"classes/City.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/Forecast.html":{},"interfaces/ICity.html":{},"interfaces/IForecast.html":{}}}],["mainweather",{"_index":287,"title":{},"body":{"components/CityCardComponent.html":{}}}],["make",{"_index":423,"title":{},"body":{"components/CityComponent.html":{}}}],["makes",{"_index":888,"title":{},"body":{"components/ModalComponent.html":{}}}],["map",{"_index":368,"title":{},"body":{"components/CityComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{}}}],["mapcityforecast",{"_index":517,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["mapcityforecast(response",{"_index":546,"title":{},"body":{"injectables/CityService.html":{}}}],["mapcityweather",{"_index":518,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["mapcityweather(item",{"_index":549,"title":{},"body":{"injectables/CityService.html":{}}}],["mapped",{"_index":372,"title":{},"body":{"components/CityComponent.html":{},"injectables/CityService.html":{}}}],["maptimetohours",{"_index":358,"title":{},"body":{"components/CityComponent.html":{}}}],["maptimetohours(time",{"_index":366,"title":{},"body":{"components/CityComponent.html":{}}}],["margin",{"_index":467,"title":{},"body":{"components/CityComponent.html":{},"components/ModalComponent.html":{}}}],["matching",{"_index":23,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"classes/City.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{},"classes/Forecast.html":{},"components/HomeComponent.html":{},"interfaces/ICity.html":{},"interfaces/ICoord.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"interfaces/IVolume.html":{},"interfaces/IWeather.html":{},"interfaces/IWind.html":{},"components/ModalComponent.html":{},"classes/RouterServiceMock.html":{},"modules/SharedModule.html":{},"injectables/StorageService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":902,"title":{},"body":{"components/ModalComponent.html":{}}}],["maximum",{"_index":817,"title":{},"body":{"interfaces/IMain.html":{}}}],["maxwidth",{"_index":421,"title":{},"body":{"components/CityComponent.html":{}}}],["megalopolises",{"_index":811,"title":{},"body":{"interfaces/IMain.html":{}}}],["mergemap",{"_index":564,"title":{},"body":{"injectables/CityService.html":{}}}],["mergemap((ids",{"_index":664,"title":{},"body":{"injectables/CityService.html":{}}}],["metadata",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"directives/DynamicContentDirective.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["meteorological",{"_index":834,"title":{},"body":{"interfaces/IWind.html":{}}}],["meter/sec",{"_index":830,"title":{},"body":{"interfaces/IWind.html":{}}}],["methods",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"classes/RouterServiceMock.html":{},"injectables/StorageService.html":{}}}],["metric",{"_index":798,"title":{},"body":{"interfaces/IMain.html":{},"interfaces/IWind.html":{}}}],["middle",{"_index":465,"title":{},"body":{"components/CityComponent.html":{},"components/ModalComponent.html":{}}}],["miles/hour",{"_index":831,"title":{},"body":{"interfaces/IWind.html":{}}}],["minimum",{"_index":806,"title":{},"body":{"interfaces/IMain.html":{}}}],["miscellaneous",{"_index":1012,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":823,"title":{},"body":{"interfaces/IVolume.html":{}}}],["mobile",{"_index":428,"title":{},"body":{"components/CityComponent.html":{}}}],["modal",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["modal.component.html",{"_index":837,"title":{},"body":{"components/ModalComponent.html":{}}}],["modal.component.scss",{"_index":836,"title":{},"body":{"components/ModalComponent.html":{}}}],["modalcomponent",{"_index":73,"title":{"components/ModalComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"modules/SharedModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modalcontent",{"_index":840,"title":{},"body":{"components/ModalComponent.html":{}}}],["modaldirective",{"_index":861,"title":{},"body":{"components/ModalComponent.html":{}}}],["modalmodule",{"_index":923,"title":{},"body":{"modules/SharedModule.html":{}}}],["modalmodule.forroot",{"_index":927,"title":{},"body":{"modules/SharedModule.html":{}}}],["modalservice",{"_index":849,"title":{},"body":{"components/ModalComponent.html":{}}}],["modalsubject",{"_index":221,"title":{},"body":{"injectables/AppService.html":{},"classes/AppServiceMock.html":{}}}],["model",{"_index":528,"title":{},"body":{"injectables/CityService.html":{}}}],["models/city",{"_index":566,"title":{},"body":{"injectables/CityService.html":{}}}],["models/forecast",{"_index":573,"title":{},"body":{"injectables/CityService.html":{}}}],["module",{"_index":124,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/SharedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{},"overview.html":{}}}],["modules",{"_index":126,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/SharedModule.html":{},"coverage.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["moment",{"_index":807,"title":{},"body":{"interfaces/IMain.html":{}}}],["more",{"_index":1053,"title":{},"body":{"index.html":{}}}],["moz",{"_index":348,"title":{},"body":{"components/CityCardComponent.html":{}}}],["multi",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["name",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"classes/City.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{},"components/HomeComponent.html":{},"interfaces/ICity.html":{},"components/ModalComponent.html":{},"injectables/StorageService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["navigate",{"_index":914,"title":{},"body":{"classes/RouterServiceMock.html":{},"index.html":{}}}],["navigateto",{"_index":195,"title":{},"body":{"classes/AppPage.html":{}}}],["need",{"_index":899,"title":{},"body":{"components/ModalComponent.html":{}}}],["new",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"components/ModalComponent.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":68,"title":{},"body":{"components/AppComponent.html":{}}}],["ng",{"_index":1025,"title":{},"body":{"index.html":{}}}],["ngafterviewchecked",{"_index":841,"title":{},"body":{"components/ModalComponent.html":{}}}],["ngmodule",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/SharedModule.html":{}}}],["ngoninit",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["ngx",{"_index":89,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/CustomTranslateLoader.html":{},"components/ModalComponent.html":{},"modules/SharedModule.html":{},"dependencies.html":{}}}],["none",{"_index":881,"title":{},"body":{"components/ModalComponent.html":{}}}],["null",{"_index":583,"title":{},"body":{"injectables/CityService.html":{}}}],["number",{"_index":261,"title":{},"body":{"classes/City.html":{}}}],["o",{"_index":349,"title":{},"body":{"components/CityCardComponent.html":{}}}],["object",{"_index":538,"title":{},"body":{"injectables/CityService.html":{},"injectables/StorageService.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":534,"title":{},"body":{"injectables/CityService.html":{}}}],["of(this.defaultcities[0",{"_index":700,"title":{},"body":{"classes/CityServiceMock.html":{}}}],["of(true",{"_index":506,"title":{},"body":{"guards/CityResolverGuard.html":{}}}],["once",{"_index":65,"title":{},"body":{"components/AppComponent.html":{}}}],["one_hour",{"_index":646,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/IVolume.html":{}}}],["onhidden",{"_index":842,"title":{},"body":{"components/ModalComponent.html":{}}}],["oninit",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["openweather",{"_index":529,"title":{},"body":{"injectables/CityService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["optional",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"classes/City.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{},"classes/Forecast.html":{},"components/HomeComponent.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"components/ModalComponent.html":{},"injectables/StorageService.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":816,"title":{},"body":{"interfaces/IMain.html":{}}}],["out",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"components/CityCardComponent.html":{},"modules/SharedModule.html":{},"index.html":{},"overview.html":{}}}],["output",{"_index":314,"title":{},"body":{"components/CityCardComponent.html":{}}}],["outputs",{"_index":292,"title":{},"body":{"components/CityCardComponent.html":{}}}],["outside",{"_index":892,"title":{},"body":{"components/ModalComponent.html":{}}}],["overview",{"_index":1062,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":985,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":911,"title":{},"body":{"components/ModalComponent.html":{}}}],["param",{"_index":403,"title":{},"body":{"components/CityComponent.html":{},"injectables/CityService.html":{}}}],["parameter",{"_index":815,"title":{},"body":{"interfaces/IMain.html":{}}}],["parameters",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{},"components/HomeComponent.html":{},"interfaces/IWeather.html":{},"components/ModalComponent.html":{},"injectables/StorageService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":11,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{}}}],["params.id",{"_index":391,"title":{},"body":{"components/CityComponent.html":{}}}],["path",{"_index":208,"title":{},"body":{"modules/AppRoutingModule.html":{},"dependencies.html":{}}}],["pathmatch",{"_index":209,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["pm",{"_index":379,"title":{},"body":{"components/CityComponent.html":{}}}],["pointer",{"_index":344,"title":{},"body":{"components/CityCardComponent.html":{},"components/ModalComponent.html":{}}}],["population",{"_index":243,"title":{},"body":{"classes/City.html":{},"miscellaneous/variables.html":{}}}],["possible",{"_index":809,"title":{},"body":{"interfaces/IMain.html":{}}}],["prefix",{"_index":707,"title":{},"body":{"classes/CustomTranslateLoader.html":{}}}],["pressure",{"_index":605,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/ICity.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"miscellaneous/variables.html":{}}}],["private",{"_index":92,"title":{},"body":{"components/AppComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CustomTranslateLoader.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["prod",{"_index":1041,"title":{},"body":{"index.html":{}}}],["production",{"_index":1042,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":1018,"title":{},"body":{"index.html":{}}}],["promise",{"_index":200,"title":{},"body":{"classes/AppPage.html":{}}}],["properties",{"_index":9,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"components/AppComponent.html":{},"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"classes/City.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"directives/DynamicContentDirective.html":{},"classes/Forecast.html":{},"components/HomeComponent.html":{},"interfaces/ICity.html":{},"interfaces/ICoord.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"interfaces/IVolume.html":{},"interfaces/IWeather.html":{},"interfaces/IWind.html":{},"components/ModalComponent.html":{}}}],["protractor",{"_index":198,"title":{},"body":{"classes/AppPage.html":{},"index.html":{}}}],["provide",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["providedin",{"_index":229,"title":{},"body":{"injectables/AppService.html":{},"injectables/StorageService.html":{}}}],["providers",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{},"overview.html":{}}}],["public",{"_index":10,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"directives/DynamicContentDirective.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/StorageService.html":{}}}],["rain",{"_index":244,"title":{},"body":{"classes/City.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/Forecast.html":{},"interfaces/ICity.html":{},"interfaces/IForecast.html":{},"interfaces/IWeather.html":{},"miscellaneous/variables.html":{}}}],["rate",{"_index":781,"title":{},"body":{"interfaces/ICity.html":{},"interfaces/IForecast.html":{}}}],["readme",{"_index":1056,"title":{},"body":{"index.html":{}}}],["redirectto",{"_index":215,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["reference",{"_index":76,"title":{},"body":{"components/AppComponent.html":{}}}],["reload",{"_index":1030,"title":{},"body":{"index.html":{}}}],["remove",{"_index":553,"title":{},"body":{"injectables/CityService.html":{}}}],["removecity",{"_index":281,"title":{},"body":{"components/CityCardComponent.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["removecity(e",{"_index":308,"title":{},"body":{"components/CityCardComponent.html":{}}}],["removecity(id",{"_index":551,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["removedcity",{"_index":682,"title":{},"body":{"injectables/CityService.html":{}}}],["removefromlocalstorage",{"_index":930,"title":{},"body":{"injectables/StorageService.html":{}}}],["removefromlocalstorage(key",{"_index":936,"title":{},"body":{"injectables/StorageService.html":{}}}],["render",{"_index":64,"title":{},"body":{"components/AppComponent.html":{}}}],["rendered",{"_index":94,"title":{},"body":{"components/AppComponent.html":{}}}],["represent",{"_index":543,"title":{},"body":{"injectables/CityService.html":{},"interfaces/ICoord.html":{}}}],["represents",{"_index":783,"title":{},"body":{"interfaces/ICity.html":{},"interfaces/IForecast.html":{}}}],["represet",{"_index":786,"title":{},"body":{"interfaces/ICity.html":{},"interfaces/ICoord.html":{}}}],["request",{"_index":542,"title":{},"body":{"injectables/CityService.html":{}}}],["require",{"_index":983,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":1085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":397,"title":{},"body":{"components/CityComponent.html":{},"injectables/CityService.html":{}}}],["res.list",{"_index":633,"title":{},"body":{"injectables/CityService.html":{}}}],["reset",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{},"overview.html":{}}}],["resolve",{"_index":213,"title":{},"body":{"modules/AppRoutingModule.html":{},"guards/CityResolverGuard.html":{}}}],["resolve(route",{"_index":496,"title":{},"body":{"guards/CityResolverGuard.html":{}}}],["resolver.guard",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["resolver.guard.ts",{"_index":494,"title":{},"body":{"guards/CityResolverGuard.html":{},"coverage.html":{}}}],["resolver.guard.ts:12",{"_index":500,"title":{},"body":{"guards/CityResolverGuard.html":{}}}],["resolver.guard.ts:9",{"_index":495,"title":{},"body":{"guards/CityResolverGuard.html":{}}}],["response",{"_index":548,"title":{},"body":{"injectables/CityService.html":{}}}],["responsive",{"_index":418,"title":{},"body":{"components/CityComponent.html":{}}}],["result",{"_index":22,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"classes/City.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{},"classes/Forecast.html":{},"components/HomeComponent.html":{},"interfaces/ICity.html":{},"interfaces/ICoord.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"interfaces/IVolume.html":{},"interfaces/IWeather.html":{},"interfaces/IWind.html":{},"components/ModalComponent.html":{},"classes/RouterServiceMock.html":{},"modules/SharedModule.html":{},"injectables/StorageService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":24,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"classes/City.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{},"classes/Forecast.html":{},"components/HomeComponent.html":{},"interfaces/ICity.html":{},"interfaces/ICoord.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"interfaces/IVolume.html":{},"interfaces/IWeather.html":{},"interfaces/IWind.html":{},"components/ModalComponent.html":{},"classes/RouterServiceMock.html":{},"modules/SharedModule.html":{},"injectables/StorageService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPage.html":{},"components/CityComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"injectables/StorageService.html":{}}}],["returns",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"classes/RouterServiceMock.html":{},"injectables/StorageService.html":{}}}],["rgba(0",{"_index":338,"title":{},"body":{"components/CityCardComponent.html":{}}}],["root",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{},"injectables/AppService.html":{},"injectables/StorageService.html":{}}}],["root'},{'name",{"_index":112,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["route",{"_index":501,"title":{},"body":{"guards/CityResolverGuard.html":{}}}],["router",{"_index":360,"title":{},"body":{"components/CityComponent.html":{},"components/HomeComponent.html":{}}}],["routermodule",{"_index":206,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":216,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routerservicemock",{"_index":912,"title":{"classes/RouterServiceMock.html":{}},"body":{"classes/RouterServiceMock.html":{},"coverage.html":{}}}],["routerstatesnapshot",{"_index":499,"title":{},"body":{"guards/CityResolverGuard.html":{}}}],["routes",{"_index":205,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/HomeComponent.html":{},"coverage.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["routing.module",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":204,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["rules",{"_index":419,"title":{},"body":{"components/CityComponent.html":{}}}],["run",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["running",{"_index":1043,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1006,"title":{},"body":{"dependencies.html":{}}}],["rxjs/internal/observable",{"_index":565,"title":{},"body":{"injectables/CityService.html":{}}}],["rxjs/internal/observable/of",{"_index":20,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"guards/CityResolverGuard.html":{},"classes/CityServiceMock.html":{}}}],["rxjs/internal/subject",{"_index":228,"title":{},"body":{"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"classes/CityServiceMock.html":{}}}],["rxjs/operators",{"_index":502,"title":{},"body":{"guards/CityResolverGuard.html":{},"injectables/CityService.html":{}}}],["scaffolding",{"_index":1033,"title":{},"body":{"index.html":{}}}],["scale(1.05",{"_index":342,"title":{},"body":{"components/CityCardComponent.html":{}}}],["sea",{"_index":803,"title":{},"body":{"interfaces/IMain.html":{}}}],["sea_level",{"_index":603,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/ICity.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"miscellaneous/variables.html":{}}}],["search",{"_index":105,"title":{},"body":{"components/AppComponent.html":{}}}],["secondary",{"_index":330,"title":{},"body":{"components/CityCardComponent.html":{},"components/CityComponent.html":{}}}],["select",{"_index":751,"title":{},"body":{"components/HomeComponent.html":{}}}],["select(id",{"_index":757,"title":{},"body":{"components/HomeComponent.html":{}}}],["selected",{"_index":282,"title":{},"body":{"components/CityCardComponent.html":{}}}],["selected(citycode",{"_index":311,"title":{},"body":{"components/CityCardComponent.html":{}}}],["selectedcard",{"_index":294,"title":{},"body":{"components/CityCardComponent.html":{}}}],["selectedcity",{"_index":476,"title":{},"body":{"components/CityDropDownComponent.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{}}}],["selectedcity(cityid",{"_index":480,"title":{},"body":{"components/CityDropDownComponent.html":{}}}],["selectedid",{"_index":475,"title":{},"body":{"components/CityDropDownComponent.html":{}}}],["selecting",{"_index":555,"title":{},"body":{"injectables/CityService.html":{}}}],["selector",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"directives/DynamicContentDirective.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["series",{"_index":438,"title":{},"body":{"components/CityComponent.html":{}}}],["serve",{"_index":1026,"title":{},"body":{"index.html":{}}}],["server",{"_index":1024,"title":{},"body":{"index.html":{}}}],["service.mock.ts",{"_index":7,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"classes/AppServiceMock.html":{},"classes/CityServiceMock.html":{},"classes/RouterServiceMock.html":{},"coverage.html":{}}}],["service.mock.ts:4",{"_index":232,"title":{},"body":{"classes/AppServiceMock.html":{},"classes/RouterServiceMock.html":{}}}],["service.mock.ts:5",{"_index":18,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"classes/AppServiceMock.html":{}}}],["service.mock.ts:55",{"_index":694,"title":{},"body":{"classes/CityServiceMock.html":{}}}],["service.mock.ts:58",{"_index":697,"title":{},"body":{"classes/CityServiceMock.html":{}}}],["service.mock.ts:6",{"_index":233,"title":{},"body":{"classes/AppServiceMock.html":{},"classes/CityServiceMock.html":{}}}],["service.mock.ts:62",{"_index":692,"title":{},"body":{"classes/CityServiceMock.html":{}}}],["service.mock.ts:65",{"_index":693,"title":{},"body":{"classes/CityServiceMock.html":{}}}],["service.mock.ts:68",{"_index":696,"title":{},"body":{"classes/CityServiceMock.html":{}}}],["service.mock.ts:7",{"_index":687,"title":{},"body":{"classes/CityServiceMock.html":{}}}],["service.mock.ts:71",{"_index":691,"title":{},"body":{"classes/CityServiceMock.html":{}}}],["service.mock.ts:74",{"_index":695,"title":{},"body":{"classes/CityServiceMock.html":{}}}],["service.mock.ts:78",{"_index":690,"title":{},"body":{"classes/CityServiceMock.html":{}}}],["service.mock.ts:79",{"_index":698,"title":{},"body":{"classes/CityServiceMock.html":{}}}],["service.mock.ts:8",{"_index":688,"title":{},"body":{"classes/CityServiceMock.html":{}}}],["service.mock.ts:9",{"_index":689,"title":{},"body":{"classes/CityServiceMock.html":{}}}],["services",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"injectables/CityService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["services/city.service",{"_index":483,"title":{},"body":{"components/CityDropDownComponent.html":{}}}],["set",{"_index":97,"title":{},"body":{"components/AppComponent.html":{}}}],["setlocalstorage",{"_index":931,"title":{},"body":{"injectables/StorageService.html":{}}}],["setlocalstorage(key",{"_index":938,"title":{},"body":{"injectables/StorageService.html":{}}}],["sets",{"_index":897,"title":{},"body":{"components/ModalComponent.html":{}}}],["shadow",{"_index":334,"title":{},"body":{"components/CityCardComponent.html":{}}}],["shared",{"_index":415,"title":{},"body":{"components/CityComponent.html":{}}}],["shared/components/modal/modal.component",{"_index":83,"title":{},"body":{"components/AppComponent.html":{}}}],["shared/constants/defines",{"_index":387,"title":{},"body":{"components/CityComponent.html":{},"components/HomeComponent.html":{}}}],["shared/models/city",{"_index":388,"title":{},"body":{"components/CityComponent.html":{}}}],["shared/services/city.service",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"components/CityComponent.html":{},"guards/CityResolverGuard.html":{},"components/HomeComponent.html":{}}}],["shared/services/storage.service",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/shared.module",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/utils/app",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/utils/custom",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/widgets/city",{"_index":85,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/HomeComponent.html":{}}}],["sharedmodule",{"_index":138,"title":{"modules/SharedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["showloader",{"_index":222,"title":{},"body":{"injectables/AppService.html":{},"classes/AppServiceMock.html":{}}}],["showmodal",{"_index":843,"title":{},"body":{"components/ModalComponent.html":{}}}],["showmodal(component",{"_index":855,"title":{},"body":{"components/ModalComponent.html":{}}}],["size",{"_index":327,"title":{},"body":{"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/ModalComponent.html":{}}}],["snow",{"_index":245,"title":{},"body":{"classes/City.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/Forecast.html":{},"interfaces/ICity.html":{},"interfaces/IForecast.html":{},"interfaces/IWeather.html":{},"miscellaneous/variables.html":{}}}],["snow.1h",{"_index":1115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["snow1h",{"_index":1114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"classes/City.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{},"classes/Forecast.html":{},"components/HomeComponent.html":{},"interfaces/ICity.html":{},"interfaces/ICoord.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"interfaces/IVolume.html":{},"interfaces/IWeather.html":{},"interfaces/IWind.html":{},"components/ModalComponent.html":{},"classes/RouterServiceMock.html":{},"modules/SharedModule.html":{},"injectables/StorageService.html":{},"index.html":{}}}],["space",{"_index":426,"title":{},"body":{"components/CityComponent.html":{}}}],["spec\\.ts",{"_index":1086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["specfic",{"_index":554,"title":{},"body":{"injectables/CityService.html":{}}}],["speed",{"_index":612,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/ICity.html":{},"interfaces/IForecast.html":{},"interfaces/IWind.html":{}}}],["spline",{"_index":409,"title":{},"body":{"components/CityComponent.html":{}}}],["src/.../app",{"_index":1014,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../app.module.ts",{"_index":1015,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../defines.ts",{"_index":1071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":1070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../routes",{"_index":1066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../shared.module.ts",{"_index":1067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../test.ts",{"_index":1068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":203,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:13",{"_index":79,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:15",{"_index":52,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:17",{"_index":72,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:24",{"_index":57,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/app.service",{"_index":484,"title":{},"body":{"components/CityDropDownComponent.html":{}}}],["src/app/app.service.ts",{"_index":219,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app/app.service.ts:10",{"_index":223,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app/app.service.ts:8",{"_index":225,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app/app.service.ts:9",{"_index":224,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app/city/city",{"_index":493,"title":{},"body":{"guards/CityResolverGuard.html":{},"coverage.html":{}}}],["src/app/city/city.component.ts",{"_index":352,"title":{},"body":{"components/CityComponent.html":{},"coverage.html":{}}}],["src/app/city/city.component.ts:17",{"_index":384,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:19",{"_index":383,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:21",{"_index":363,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:23",{"_index":386,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:25",{"_index":380,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:44",{"_index":367,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:51",{"_index":364,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/home/home.component.ts",{"_index":747,"title":{},"body":{"components/HomeComponent.html":{},"coverage.html":{}}}],["src/app/home/home.component.ts:14",{"_index":752,"title":{},"body":{"components/HomeComponent.html":{}}}],["src/app/home/home.component.ts:15",{"_index":760,"title":{},"body":{"components/HomeComponent.html":{}}}],["src/app/home/home.component.ts:16",{"_index":759,"title":{},"body":{"components/HomeComponent.html":{}}}],["src/app/home/home.component.ts:21",{"_index":756,"title":{},"body":{"components/HomeComponent.html":{}}}],["src/app/home/home.component.ts:29",{"_index":758,"title":{},"body":{"components/HomeComponent.html":{}}}],["src/app/home/home.component.ts:33",{"_index":753,"title":{},"body":{"components/HomeComponent.html":{}}}],["src/app/home/home.component.ts:37",{"_index":755,"title":{},"body":{"components/HomeComponent.html":{}}}],["src/app/mock/service/activatedroute",{"_index":6,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"coverage.html":{}}}],["src/app/mock/service/app",{"_index":231,"title":{},"body":{"classes/AppServiceMock.html":{},"coverage.html":{}}}],["src/app/mock/service/city",{"_index":686,"title":{},"body":{"classes/CityServiceMock.html":{},"coverage.html":{}}}],["src/app/mock/service/router",{"_index":913,"title":{},"body":{"classes/RouterServiceMock.html":{},"coverage.html":{}}}],["src/app/shared/components/city",{"_index":275,"title":{},"body":{"components/CityCardComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/modal/modal.component.ts",{"_index":835,"title":{},"body":{"components/ModalComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/modal/modal.component.ts:13",{"_index":862,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/app/shared/components/modal/modal.component.ts:14",{"_index":860,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/app/shared/components/modal/modal.component.ts:15",{"_index":859,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/app/shared/components/modal/modal.component.ts:16",{"_index":850,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/app/shared/components/modal/modal.component.ts:17",{"_index":863,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/app/shared/components/modal/modal.component.ts:18",{"_index":857,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/app/shared/components/modal/modal.component.ts:19",{"_index":848,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/app/shared/components/modal/modal.component.ts:27",{"_index":853,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/app/shared/components/modal/modal.component.ts:30",{"_index":852,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/app/shared/components/modal/modal.component.ts:38",{"_index":856,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/app/shared/components/modal/modal.component.ts:44",{"_index":851,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/app/shared/components/modal/modal.component.ts:52",{"_index":854,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/app/shared/constants/defines.ts",{"_index":967,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/shared/constants/routes",{"_index":968,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/shared/directives/dynamic",{"_index":733,"title":{},"body":{"directives/DynamicContentDirective.html":{},"coverage.html":{}}}],["src/app/shared/interface/icity.ts",{"_index":769,"title":{},"body":{"interfaces/ICity.html":{},"coverage.html":{}}}],["src/app/shared/interface/icoord.ts",{"_index":790,"title":{},"body":{"interfaces/ICoord.html":{},"coverage.html":{}}}],["src/app/shared/interface/iforecast.ts",{"_index":793,"title":{},"body":{"interfaces/IForecast.html":{},"coverage.html":{}}}],["src/app/shared/interface/imain.ts",{"_index":794,"title":{},"body":{"interfaces/IMain.html":{},"coverage.html":{}}}],["src/app/shared/interface/ivolume.ts",{"_index":819,"title":{},"body":{"interfaces/IVolume.html":{},"coverage.html":{}}}],["src/app/shared/interface/iweather.ts",{"_index":825,"title":{},"body":{"interfaces/IWeather.html":{},"coverage.html":{}}}],["src/app/shared/interface/iwind.ts",{"_index":829,"title":{},"body":{"interfaces/IWind.html":{},"coverage.html":{}}}],["src/app/shared/models/city",{"_index":699,"title":{},"body":{"classes/CityServiceMock.html":{}}}],["src/app/shared/models/city.ts",{"_index":234,"title":{},"body":{"classes/City.html":{},"coverage.html":{}}}],["src/app/shared/models/city.ts:10",{"_index":265,"title":{},"body":{"classes/City.html":{}}}],["src/app/shared/models/city.ts:11",{"_index":266,"title":{},"body":{"classes/City.html":{}}}],["src/app/shared/models/city.ts:12",{"_index":264,"title":{},"body":{"classes/City.html":{}}}],["src/app/shared/models/city.ts:13",{"_index":263,"title":{},"body":{"classes/City.html":{}}}],["src/app/shared/models/city.ts:14",{"_index":268,"title":{},"body":{"classes/City.html":{}}}],["src/app/shared/models/city.ts:15",{"_index":260,"title":{},"body":{"classes/City.html":{}}}],["src/app/shared/models/city.ts:16",{"_index":267,"title":{},"body":{"classes/City.html":{}}}],["src/app/shared/models/city.ts:17",{"_index":253,"title":{},"body":{"classes/City.html":{}}}],["src/app/shared/models/city.ts:18",{"_index":258,"title":{},"body":{"classes/City.html":{}}}],["src/app/shared/models/city.ts:19",{"_index":262,"title":{},"body":{"classes/City.html":{}}}],["src/app/shared/models/city.ts:5",{"_index":259,"title":{},"body":{"classes/City.html":{}}}],["src/app/shared/models/city.ts:6",{"_index":252,"title":{},"body":{"classes/City.html":{}}}],["src/app/shared/models/city.ts:7",{"_index":251,"title":{},"body":{"classes/City.html":{}}}],["src/app/shared/models/city.ts:8",{"_index":256,"title":{},"body":{"classes/City.html":{}}}],["src/app/shared/models/city.ts:9",{"_index":254,"title":{},"body":{"classes/City.html":{}}}],["src/app/shared/models/forecast.ts",{"_index":738,"title":{},"body":{"classes/Forecast.html":{},"coverage.html":{}}}],["src/app/shared/models/forecast.ts:4",{"_index":740,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/shared/models/forecast.ts:5",{"_index":743,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/shared/models/forecast.ts:6",{"_index":742,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/shared/models/forecast.ts:7",{"_index":745,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/shared/models/forecast.ts:8",{"_index":741,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/shared/models/forecast.ts:9",{"_index":744,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/shared/services/city.service.ts",{"_index":508,"title":{},"body":{"injectables/CityService.html":{},"coverage.html":{}}}],["src/app/shared/services/city.service.ts:103",{"_index":536,"title":{},"body":{"injectables/CityService.html":{}}}],["src/app/shared/services/city.service.ts:115",{"_index":547,"title":{},"body":{"injectables/CityService.html":{}}}],["src/app/shared/services/city.service.ts:16",{"_index":560,"title":{},"body":{"injectables/CityService.html":{}}}],["src/app/shared/services/city.service.ts:17",{"_index":558,"title":{},"body":{"injectables/CityService.html":{}}}],["src/app/shared/services/city.service.ts:176",{"_index":527,"title":{},"body":{"injectables/CityService.html":{}}}],["src/app/shared/services/city.service.ts:18",{"_index":559,"title":{},"body":{"injectables/CityService.html":{}}}],["src/app/shared/services/city.service.ts:19",{"_index":520,"title":{},"body":{"injectables/CityService.html":{}}}],["src/app/shared/services/city.service.ts:201",{"_index":545,"title":{},"body":{"injectables/CityService.html":{}}}],["src/app/shared/services/city.service.ts:210",{"_index":523,"title":{},"body":{"injectables/CityService.html":{}}}],["src/app/shared/services/city.service.ts:228",{"_index":552,"title":{},"body":{"injectables/CityService.html":{}}}],["src/app/shared/services/city.service.ts:28",{"_index":540,"title":{},"body":{"injectables/CityService.html":{}}}],["src/app/shared/services/city.service.ts:40",{"_index":550,"title":{},"body":{"injectables/CityService.html":{}}}],["src/app/shared/services/city.service.ts:89",{"_index":532,"title":{},"body":{"injectables/CityService.html":{}}}],["src/app/shared/services/storage.service.ts",{"_index":928,"title":{},"body":{"injectables/StorageService.html":{},"coverage.html":{}}}],["src/app/shared/services/storage.service.ts:10",{"_index":934,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/app/shared/services/storage.service.ts:19",{"_index":939,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/app/shared/services/storage.service.ts:28",{"_index":937,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/app/shared/services/storage.service.ts:6",{"_index":932,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/app/shared/shared.module.ts",{"_index":918,"title":{},"body":{"modules/SharedModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/shared/utils/app",{"_index":975,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/shared/utils/custom",{"_index":701,"title":{},"body":{"classes/CustomTranslateLoader.html":{},"coverage.html":{}}}],["src/app/shared/utils/dynamic",{"_index":720,"title":{},"body":{"classes/DynamicComponent.html":{},"coverage.html":{}}}],["src/app/shared/widgets/city",{"_index":471,"title":{},"body":{"components/CityDropDownComponent.html":{},"coverage.html":{}}}],["src/environments/environment.prod.ts",{"_index":978,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":980,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test.ts",{"_index":981,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/variables.scss",{"_index":320,"title":{},"body":{"components/CityCardComponent.html":{},"components/CityComponent.html":{}}}],["started",{"_index":1017,"title":{"index.html":{}},"body":{}}],["state",{"_index":498,"title":{},"body":{"guards/CityResolverGuard.html":{}}}],["statements",{"_index":953,"title":{},"body":{"coverage.html":{}}}],["still",{"_index":890,"title":{},"body":{"components/ModalComponent.html":{}}}],["storage.service",{"_index":574,"title":{},"body":{"injectables/CityService.html":{}}}],["storageservice",{"_index":140,"title":{"injectables/StorageService.html":{}},"body":{"modules/AppModule.html":{},"injectables/CityService.html":{},"injectables/StorageService.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["stored",{"_index":1038,"title":{},"body":{"index.html":{}}}],["stretching",{"_index":906,"title":{},"body":{"components/ModalComponent.html":{}}}],["string",{"_index":250,"title":{},"body":{"classes/City.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/Forecast.html":{},"interfaces/ICity.html":{},"interfaces/ICoord.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"interfaces/IVolume.html":{},"interfaces/IWeather.html":{},"interfaces/IWind.html":{},"components/ModalComponent.html":{},"injectables/StorageService.html":{}}}],["string(value",{"_index":948,"title":{},"body":{"injectables/StorageService.html":{}}}],["styles",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["styleurls",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["sub",{"_index":325,"title":{},"body":{"components/CityCardComponent.html":{},"components/CityComponent.html":{}}}],["subject",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"classes/CityServiceMock.html":{}}}],["suffix",{"_index":708,"title":{},"body":{"classes/CustomTranslateLoader.html":{}}}],["sunrise",{"_index":246,"title":{},"body":{"classes/City.html":{},"classes/CityServiceMock.html":{},"interfaces/ICity.html":{},"miscellaneous/variables.html":{}}}],["sunset",{"_index":247,"title":{},"body":{"classes/City.html":{},"classes/CityServiceMock.html":{},"interfaces/ICity.html":{},"miscellaneous/variables.html":{}}}],["super(http",{"_index":715,"title":{},"body":{"classes/CustomTranslateLoader.html":{}}}],["support",{"_index":1057,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":889,"title":{},"body":{"components/ModalComponent.html":{}}}],["svg",{"_index":1058,"title":{},"body":{"modules.html":{}}}],["sys.country",{"_index":1118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sys.sunrise",{"_index":1116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sys.sunset",{"_index":1117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sys.type",{"_index":1120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":895,"title":{},"body":{"components/ModalComponent.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":984,"title":{},"body":{"coverage.html":{}}}],["temp",{"_index":288,"title":{},"body":{"components/CityCardComponent.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/ICity.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"miscellaneous/variables.html":{}}}],["temp_kf",{"_index":644,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/IMain.html":{},"miscellaneous/variables.html":{}}}],["temp_max",{"_index":785,"title":{},"body":{"interfaces/ICity.html":{},"interfaces/IForecast.html":{}}}],["temp_min",{"_index":784,"title":{},"body":{"interfaces/ICity.html":{},"interfaces/IForecast.html":{}}}],["temperature",{"_index":795,"title":{},"body":{"interfaces/IMain.html":{}}}],["template",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["templateurl",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["tempmax",{"_index":289,"title":{},"body":{"components/CityCardComponent.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/IMain.html":{},"miscellaneous/variables.html":{}}}],["tempmin",{"_index":290,"title":{},"body":{"components/CityCardComponent.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/IMain.html":{},"miscellaneous/variables.html":{}}}],["test",{"_index":1045,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1044,"title":{},"body":{"index.html":{}}}],["text",{"_index":410,"title":{},"body":{"components/CityComponent.html":{}}}],["this.activeroute.params.subscribe(params",{"_index":389,"title":{},"body":{"components/CityComponent.html":{}}}],["this.allcities",{"_index":658,"title":{},"body":{"injectables/CityService.html":{}}}],["this.allcities.find(city",{"_index":683,"title":{},"body":{"injectables/CityService.html":{}}}],["this.appservice.hidemodal.next",{"_index":487,"title":{},"body":{"components/CityDropDownComponent.html":{}}}],["this.appservice.hidemodal.subscribe(_",{"_index":102,"title":{},"body":{"components/AppComponent.html":{}}}],["this.appservice.modalsubject.next(citydropdowncomponent",{"_index":763,"title":{},"body":{"components/HomeComponent.html":{}}}],["this.appservice.modalsubject.subscribe(component",{"_index":93,"title":{},"body":{"components/AppComponent.html":{}}}],["this.appservice.showloader",{"_index":400,"title":{},"body":{"components/CityComponent.html":{},"guards/CityResolverGuard.html":{},"components/HomeComponent.html":{}}}],["this.cd.detectchanges",{"_index":875,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.chart",{"_index":440,"title":{},"body":{"components/CityComponent.html":{}}}],["this.cities",{"_index":575,"title":{},"body":{"injectables/CityService.html":{}}}],["this.cities.findindex(item",{"_index":672,"title":{},"body":{"injectables/CityService.html":{}}}],["this.cities.push(removedcity",{"_index":684,"title":{},"body":{"injectables/CityService.html":{}}}],["this.cities.splice(0",{"_index":661,"title":{},"body":{"injectables/CityService.html":{}}}],["this.cities.splice(deletedcity",{"_index":673,"title":{},"body":{"injectables/CityService.html":{}}}],["this.city",{"_index":393,"title":{},"body":{"components/CityComponent.html":{}}}],["this.city.forecasts",{"_index":396,"title":{},"body":{"components/CityComponent.html":{}}}],["this.city.name",{"_index":439,"title":{},"body":{"components/CityComponent.html":{}}}],["this.cityid",{"_index":390,"title":{},"body":{"components/CityComponent.html":{}}}],["this.cityservice.addnewcity(this.selectedid",{"_index":486,"title":{},"body":{"components/CityDropDownComponent.html":{}}}],["this.cityservice.cities",{"_index":504,"title":{},"body":{"guards/CityResolverGuard.html":{}}}],["this.cityservice.defaultcities",{"_index":505,"title":{},"body":{"guards/CityResolverGuard.html":{}}}],["this.cityservice.defaultcities.find(item",{"_index":394,"title":{},"body":{"components/CityComponent.html":{}}}],["this.cityservice.getcities().pipe(map(_",{"_index":507,"title":{},"body":{"guards/CityResolverGuard.html":{}}}],["this.cityservice.getcities().subscribe(_",{"_index":761,"title":{},"body":{"components/HomeComponent.html":{}}}],["this.cityservice.getcityforecast(this.cityid).subscribe(res",{"_index":392,"title":{},"body":{"components/CityComponent.html":{}}}],["this.cityservice.removecity(id",{"_index":764,"title":{},"body":{"components/HomeComponent.html":{}}}],["this.component",{"_index":874,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.componentfactoryresolver",{"_index":873,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.customhttp",{"_index":716,"title":{},"body":{"classes/CustomTranslateLoader.html":{}}}],["this.customhttp.get(this.prefix",{"_index":717,"title":{},"body":{"classes/CustomTranslateLoader.html":{}}}],["this.defaultcities",{"_index":669,"title":{},"body":{"injectables/CityService.html":{}}}],["this.defaultcities.find(item",{"_index":677,"title":{},"body":{"injectables/CityService.html":{}}}],["this.defaultcities.indexof(deletedcity",{"_index":678,"title":{},"body":{"injectables/CityService.html":{}}}],["this.defaultcities.push(city",{"_index":675,"title":{},"body":{"injectables/CityService.html":{}}}],["this.defaultcities.splice(index",{"_index":679,"title":{},"body":{"injectables/CityService.html":{}}}],["this.deletedcard.emit(citycode",{"_index":317,"title":{},"body":{"components/CityCardComponent.html":{}}}],["this.displaychart",{"_index":399,"title":{},"body":{"components/CityComponent.html":{}}}],["this.getcitiesweather(ids.tostring()).pipe(map(res",{"_index":668,"title":{},"body":{"injectables/CityService.html":{}}}],["this.getcityweather(id).subscribe(city",{"_index":670,"title":{},"body":{"injectables/CityService.html":{}}}],["this.getselectedcities(ids).pipe(map(_",{"_index":665,"title":{},"body":{"injectables/CityService.html":{}}}],["this.http.get(api.cities.data).pipe(map(res",{"_index":657,"title":{},"body":{"injectables/CityService.html":{}}}],["this.http.get(url).pipe(map((res",{"_index":632,"title":{},"body":{"injectables/CityService.html":{}}}],["this.http.get(url).pipe(map(res",{"_index":578,"title":{},"body":{"injectables/CityService.html":{}}}],["this.isloadcontent",{"_index":871,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.ismodalshown",{"_index":876,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.mapcityforecast(res",{"_index":637,"title":{},"body":{"injectables/CityService.html":{}}}],["this.mapcityweather(city",{"_index":635,"title":{},"body":{"injectables/CityService.html":{}}}],["this.mapcityweather(res",{"_index":579,"title":{},"body":{"injectables/CityService.html":{}}}],["this.modal.hide",{"_index":877,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.modal.hidemodal",{"_index":103,"title":{},"body":{"components/AppComponent.html":{}}}],["this.modal.showmodal(component",{"_index":101,"title":{},"body":{"components/AppComponent.html":{}}}],["this.modal.title",{"_index":99,"title":{},"body":{"components/AppComponent.html":{}}}],["this.modalcontent",{"_index":870,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.modalcontent.addcomponent(this.container.viewcontainerref",{"_index":872,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.router.navigate([routes.city",{"_index":762,"title":{},"body":{"components/HomeComponent.html":{}}}],["this.router.navigate([routes.home",{"_index":402,"title":{},"body":{"components/CityComponent.html":{}}}],["this.selectedcard.emit(citycode",{"_index":315,"title":{},"body":{"components/CityCardComponent.html":{}}}],["this.selectedid",{"_index":485,"title":{},"body":{"components/CityDropDownComponent.html":{}}}],["this.storageservice.getlocalstorage('cities",{"_index":656,"title":{},"body":{"injectables/CityService.html":{}}}],["this.storageservice.getlocalstorage('selectedcitiesids",{"_index":660,"title":{},"body":{"injectables/CityService.html":{}}}],["this.storageservice.setlocalstorage('cities",{"_index":667,"title":{},"body":{"injectables/CityService.html":{}}}],["this.storageservice.setlocalstorage('selectedcitiesids",{"_index":666,"title":{},"body":{"injectables/CityService.html":{}}}],["this.suffix",{"_index":718,"title":{},"body":{"classes/CustomTranslateLoader.html":{}}}],["this.translate.instant('common.addcity.title",{"_index":100,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.instant('common.apptitle",{"_index":78,"title":{},"body":{"components/AppComponent.html":{}}}],["this.value.charat(0",{"_index":431,"title":{},"body":{"components/CityComponent.html":{}}}],["three_hours",{"_index":649,"title":{},"body":{"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"interfaces/IVolume.html":{}}}],["time",{"_index":369,"title":{},"body":{"components/CityComponent.html":{},"interfaces/ICity.html":{},"interfaces/IForecast.html":{}}}],["times",{"_index":318,"title":{},"body":{"components/CityCardComponent.html":{},"components/ModalComponent.html":{}}}],["title",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/ModalComponent.html":{}}}],["tooltip",{"_index":413,"title":{},"body":{"components/CityComponent.html":{}}}],["top",{"_index":468,"title":{},"body":{"components/CityComponent.html":{}}}],["transform",{"_index":341,"title":{},"body":{"components/CityCardComponent.html":{}}}],["transition",{"_index":345,"title":{},"body":{"components/CityCardComponent.html":{}}}],["translate",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"classes/CustomTranslateLoader.html":{},"components/HomeComponent.html":{},"coverage.html":{}}}],["translate/core",{"_index":90,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/SharedModule.html":{},"dependencies.html":{}}}],["translate/http",{"_index":714,"title":{},"body":{"classes/CustomTranslateLoader.html":{},"dependencies.html":{}}}],["translatehttploader",{"_index":704,"title":{},"body":{"classes/CustomTranslateLoader.html":{}}}],["translateloader",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["translatemodule",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{}}}],["translatemodule.forroot",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["translateservice",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["tree",{"_index":31,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["true",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"components/CityComponent.html":{},"guards/CityResolverGuard.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":940,"title":{},"body":{"injectables/StorageService.html":{}}}],["tslib",{"_index":1008,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"classes/City.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"guards/CityResolverGuard.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/CustomTranslateLoader.html":{},"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{},"classes/Forecast.html":{},"components/HomeComponent.html":{},"interfaces/ICity.html":{},"interfaces/ICoord.html":{},"interfaces/IForecast.html":{},"interfaces/IMain.html":{},"interfaces/IVolume.html":{},"interfaces/IWeather.html":{},"interfaces/IWind.html":{},"components/ModalComponent.html":{},"injectables/StorageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":945,"title":{},"body":{"injectables/StorageService.html":{}}}],["types/highcharts",{"_index":992,"title":{},"body":{"dependencies.html":{}}}],["unit",{"_index":796,"title":{},"body":{"interfaces/IMain.html":{},"interfaces/IWind.html":{},"index.html":{}}}],["unix",{"_index":776,"title":{},"body":{"interfaces/ICity.html":{},"interfaces/IForecast.html":{}}}],["url",{"_index":576,"title":{},"body":{"injectables/CityService.html":{}}}],["use",{"_index":814,"title":{},"body":{"interfaces/IMain.html":{},"index.html":{}}}],["usefactory",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":541,"title":{},"body":{"injectables/CityService.html":{}}}],["utc",{"_index":777,"title":{},"body":{"interfaces/ICity.html":{},"interfaces/IForecast.html":{}}}],["utils/dynamic",{"_index":866,"title":{},"body":{"components/ModalComponent.html":{}}}],["value",{"_index":13,"title":{},"body":{"classes/ActivatedRouteServiceMock.html":{},"components/AppComponent.html":{},"injectables/AppService.html":{},"classes/AppServiceMock.html":{},"classes/CityServiceMock.html":{},"components/ModalComponent.html":{},"injectables/StorageService.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":110,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["variable",{"_index":958,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1065,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1021,"title":{},"body":{"index.html":{}}}],["vertical",{"_index":464,"title":{},"body":{"components/CityComponent.html":{},"components/ModalComponent.html":{}}}],["vertically",{"_index":894,"title":{},"body":{"components/ModalComponent.html":{}}}],["via",{"_index":1047,"title":{},"body":{"index.html":{}}}],["viewchild",{"_index":80,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{}}}],["viewchild('modal",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{}}}],["viewchild(dynamiccontentdirective",{"_index":858,"title":{},"body":{"components/ModalComponent.html":{}}}],["viewcontainerref",{"_index":725,"title":{},"body":{"classes/DynamicComponent.html":{},"directives/DynamicContentDirective.html":{}}}],["void",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"components/CityCardComponent.html":{},"components/CityComponent.html":{},"components/CityDropDownComponent.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/DynamicComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"classes/RouterServiceMock.html":{},"injectables/StorageService.html":{}}}],["volume",{"_index":820,"title":{},"body":{"interfaces/IVolume.html":{}}}],["weather",{"_index":248,"title":{},"body":{"classes/City.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/Forecast.html":{},"interfaces/ICity.html":{},"interfaces/IForecast.html":{},"interfaces/IWeather.html":{},"miscellaneous/variables.html":{}}}],["weatherdata",{"_index":619,"title":{},"body":{"injectables/CityService.html":{}}}],["weatherdata.map(el",{"_index":622,"title":{},"body":{"injectables/CityService.html":{}}}],["weatherdata.map(item",{"_index":653,"title":{},"body":{"injectables/CityService.html":{}}}],["weatherdescription",{"_index":1123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["weathericon",{"_index":291,"title":{},"body":{"components/CityCardComponent.html":{},"miscellaneous/variables.html":{}}}],["weatherid",{"_index":1121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["weathermain",{"_index":1122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webkit",{"_index":340,"title":{},"body":{"components/CityCardComponent.html":{}}}],["widgets",{"_index":926,"title":{},"body":{"modules/SharedModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["widgets/city",{"_index":925,"title":{},"body":{"modules/SharedModule.html":{}}}],["width",{"_index":461,"title":{},"body":{"components/CityComponent.html":{},"components/ModalComponent.html":{}}}],["width:inherit",{"_index":901,"title":{},"body":{"components/ModalComponent.html":{}}}],["wind",{"_index":249,"title":{},"body":{"classes/City.html":{},"injectables/CityService.html":{},"classes/CityServiceMock.html":{},"classes/Forecast.html":{},"interfaces/ICity.html":{},"interfaces/IForecast.html":{},"interfaces/IWind.html":{}}}],["wind.deg",{"_index":1109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wind.speed",{"_index":1107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winddegree",{"_index":1108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["window",{"_index":905,"title":{},"body":{"components/ModalComponent.html":{}}}],["windspeed",{"_index":1106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["within",{"_index":828,"title":{},"body":{"interfaces/IWeather.html":{}}}],["x",{"_index":435,"title":{},"body":{"components/CityComponent.html":{}}}],["xaxis",{"_index":411,"title":{},"body":{"components/CityComponent.html":{}}}],["y",{"_index":436,"title":{},"body":{"components/CityComponent.html":{}}}],["yaxis",{"_index":432,"title":{},"body":{"components/CityComponent.html":{}}}],["yes",{"_index":710,"title":{},"body":{"classes/CustomTranslateLoader.html":{}}}],["zone.js",{"_index":1010,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ActivatedRouteServiceMock.html":{"url":"classes/ActivatedRouteServiceMock.html","title":"class - ActivatedRouteServiceMock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActivatedRouteServiceMock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mock/service/activatedroute-service.mock.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                params\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            params\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : of({ id: 1 })\n                        \n                    \n                        \n                            \n                                    Defined in src/app/mock/service/activatedroute-service.mock.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { of } from 'rxjs/internal/observable/of';\n\nexport class ActivatedRouteServiceMock {\n\n    public params = of({ id: 1 });\n\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                appService\n                            \n                            \n                                modal\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(appService: AppService, translate: TranslateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appService\n                                                  \n                                                        \n                                                                        AppService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:24\n                \n            \n\n\n            \n                \n                    angular hook to run on init of the component\nhandle the modal dynamic component render once the the modal SUbject fires (next)\nand handle the modal close \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            appService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AppService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ModalComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('modal')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:15\n                            \n                        \n\n                \n                    \n                        Reference to the custom component modal  \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.translate.instant('common.appTitle')\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:13\n                            \n                        \n\n                \n                    \n                        title of the app \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, ViewChild } from '@angular/core';\nimport { AppService } from './app.service';\nimport { ModalComponent } from './shared/components/modal/modal.component';\nimport { CityDropDownComponent } from './shared/widgets/city-drop-down/city-drop-down.component';\nimport { TranslateService } from '@ngx-translate/core';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  /** title of the app */\n  title = this.translate.instant('common.appTitle');;\n  /** Reference to the custom component modal  */\n  @ViewChild('modal') modal: ModalComponent;\n\n  constructor(public appService: AppService, private translate: TranslateService) {\n  }\n\n  /** angular hook to run on init of the component\n   * handle the modal dynamic component render once the the modal SUbject fires (next)\n   * and handle the modal close \n   */\n  ngOnInit(): void {\n    this.appService.modalSubject.subscribe(component => {\n      // if the component that will be rendered is city drop down set addCity title to the modal\n      if (component == CityDropDownComponent) {\n        this.modal.title = this.translate.instant('common.addCity.title');\n      }\n      this.modal.showModal(component);\n    })\n    this.appService.hideModal.subscribe(_ => {\n      this.modal.hideModal();\n    })\n  }\n}\n\n    \n\n    \n        \n  \n  \n    \n  \n\n  \n    \n      \n        {{\"common.home\" |translate}}\n      \n    \n    \n      \n      Search\n    \n  \n\n\n\n  \n\n\n\n\n\n    \n\n    \n                \n                    ./app.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                              {{\"common.home\" |translate}}                          Search        '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityCardComponent', 'selector': 'app-city-card'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'CityDropDownComponent', 'selector': 'app-city-drop-down'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'ModalComponent', 'selector': 'app-modal'}];\n    var DIRECTIVES = [{'name': 'DynamicContentDirective', 'selector': '[dynamicContent]'}];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nCityComponent\n\nCityComponent\n\nAppModule -->\n\nCityComponent->AppModule\n\n\n\n\n\nHomeComponent\n\nHomeComponent\n\nAppModule -->\n\nHomeComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCityService\n\nCityService\n\nAppModule -->\n\nCityService->AppModule\n\n\n\n\n\nStorageService\n\nStorageService\n\nAppModule -->\n\nStorageService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            CityComponent\n                        \n                        \n                            HomeComponent\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            ENTRY_COMPONENTS\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            CityService\n                        \n                        \n                            StorageService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, APP_INITIALIZER } from '@angular/core';\nimport { TranslateLoader, TranslateModule, TranslateService } from '@ngx-translate/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CustomTranslateLoader } from './shared/utils/custom-translate-loader';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nimport { appInitializer } from './shared/utils/app-initializer';\nimport { SharedModule } from './shared/shared.module';\nimport { CityService } from './shared/services/city.service';\nimport { HomeComponent } from './home/home.component';\nimport { AppService } from './app.service';\nimport { CityDropDownComponent } from './shared/widgets/city-drop-down/city-drop-down.component';\nimport { StorageService } from './shared/services/storage.service';\nimport { CityComponent } from './city/city.component';\n\nimport { ChartModule } from 'angular-highcharts';\nimport { CityResolverGuard } from './city/city-resolver.guard';\n\nexport function createTranslateLoader(http: HttpClient) {\n  return new CustomTranslateLoader(http, '/i18n/', '.json');\n}\n\nconst MODULES = [\n  SharedModule,\n  ChartModule,\n  TranslateModule.forRoot({\n    loader: {\n      provide: TranslateLoader,\n      useFactory: (createTranslateLoader),\n      deps: [HttpClient]\n    }\n  }),\n]\n\nconst SERVICES = [\n  AppService,\n  CityService,\n  StorageService,\n  CityResolverGuard\n]\n\nconst ENTRY_COMPONENTS = [\n  CityDropDownComponent\n]\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    CityComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule,\n    ...MODULES\n  ],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: appInitializer,\n      deps: [TranslateService],\n      multi: true\n    },\n    ...SERVICES\n  ],\n  entryComponents: [...ENTRY_COMPONENTS],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppPage.html":{"url":"classes/AppPage.html","title":"class - AppPage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            e2e/src/app.po.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTitleText\n                            \n                            \n                                navigateTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTitleText\n                        \n                        \n                    \n                \n            \n            \n                \ngetTitleText()\n                \n            \n\n\n            \n                \n                    Defined in e2e/src/app.po.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            navigateTo\n                        \n                        \n                    \n                \n            \n            \n                \nnavigateTo()\n                \n            \n\n\n            \n                \n                    Defined in e2e/src/app.po.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo() {\n    return browser.get(browser.baseUrl) as Promise;\n  }\n\n  getTitleText() {\n    return element(by.css('app-root h1')).getText() as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { CityComponent } from './city/city.component';\nimport { CityResolverGuard } from './city/city-resolver.guard';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent, pathMatch: 'full' },\n  { path: 'home', component: HomeComponent },\n  { path: 'city/:id', component: CityComponent, resolve: { getCities: CityResolverGuard } },\n  { path: '**', redirectTo: 'home' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                hideModal\n                            \n                            \n                                modalSubject\n                            \n                            \n                                showLoader\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/app.service.ts:10\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hideModal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.service.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modalSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.service.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            showLoader\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.service.ts:10\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/internal/Subject';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppService {\n  modalSubject: Subject = new Subject();\n  hideModal: Subject = new Subject();\n  showLoader: boolean = false;\n  constructor() { }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppServiceMock.html":{"url":"classes/AppServiceMock.html","title":"class - AppServiceMock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppServiceMock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mock/service/app-service.mock.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                hideModal\n                            \n                            \n                                modalSubject\n                            \n                            \n                                showLoader\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hideModal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/mock/service/app-service.mock.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modalSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/mock/service/app-service.mock.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            showLoader\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/mock/service/app-service.mock.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Subject } from \"rxjs/internal/Subject\";\n\nexport class AppServiceMock {\n    modalSubject: Subject = new Subject();\n    hideModal: Subject = new Subject();\n    showLoader: boolean = false;\n\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/City.html":{"url":"classes/City.html","title":"class - City","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  City\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/city.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            ICity\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                clouds\n                            \n                            \n                                code\n                            \n                            \n                                coord\n                            \n                            \n                                countryCode\n                            \n                            \n                                dct\n                            \n                            \n                                    Optional\n                                forecasts\n                            \n                            \n                                id\n                            \n                            \n                                mainFeature\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                population\n                            \n                            \n                                rain\n                            \n                            \n                                snow\n                            \n                            \n                                sunrise\n                            \n                            \n                                sunset\n                            \n                            \n                                weather\n                            \n                            \n                                wind\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clouds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/models/city.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/models/city.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            coord\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/models/city.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            countryCode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/models/city.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dct\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/models/city.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            forecasts\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Forecast[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/models/city.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/models/city.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mainFeature\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/models/city.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/models/city.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            population\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/models/city.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rain\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/models/city.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snow\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/models/city.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sunrise\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/models/city.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sunset\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/models/city.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            weather\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/models/city.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wind\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/models/city.ts:14\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ICity } from '../interface/iCity';\nimport { Forecast } from './forecast';\n\nexport class City implements ICity {\n    id: string; name: string;\n    code: string;\n    clouds: string;\n    dct: Date;\n    countryCode: string;\n    sunrise: Date;\n    sunset: Date;\n    snow: import(\"../interface/iVolume\").IVolume;\n    rain: import(\"../interface/iVolume\").IVolume;\n    wind: import(\"../interface/iWind\").IWind;\n    mainFeature: import(\"../interface/iMain\").IMain;\n    weather: import(\"../interface/iWeather\").IWeather[];\n    coord: import(\"../interface/iCoord\").ICoord;\n    forecasts?: Forecast[];\n    population?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CityCardComponent.html":{"url":"components/CityCardComponent.html","title":"component - CityCardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CityCardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/city-card/city-card.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-city-card\n            \n\n            \n                styleUrls\n                ./city-card.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./city-card.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                removeCity\n                            \n                            \n                                selected\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                cityCode\n                            \n                            \n                                country\n                            \n                            \n                                flag\n                            \n                            \n                                mainWeather\n                            \n                            \n                                temp\n                            \n                            \n                                tempMax\n                            \n                            \n                                tempMin\n                            \n                            \n                                title\n                            \n                            \n                                weatherIcon\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                deletedCard\n                            \n                            \n                                selectedCard\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/city-card/city-card.component.ts:21\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        cityCode\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/city-card/city-card.component.ts:11\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        country\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/city-card/city-card.component.ts:15\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        flag\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/city-card/city-card.component.ts:17\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        mainWeather\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/city-card/city-card.component.ts:16\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        temp\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/city-card/city-card.component.ts:12\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        tempMax\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/city-card/city-card.component.ts:13\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        tempMin\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/city-card/city-card.component.ts:14\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/city-card/city-card.component.ts:10\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        weatherIcon\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/city-card/city-card.component.ts:18\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        deletedCard\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/city-card/city-card.component.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedCard\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/city-card/city-card.component.ts:20\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/city-card/city-card.component.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeCity\n                        \n                        \n                    \n                \n            \n            \n                \nremoveCity(e, cityCode)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/city-card/city-card.component.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cityCode\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            selected\n                        \n                        \n                    \n                \n            \n            \n                \nselected(cityCode)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/city-card/city-card.component.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cityCode\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-city-card',\n  templateUrl: './city-card.component.html',\n  styleUrls: ['./city-card.component.scss']\n})\nexport class CityCardComponent implements OnInit {\n\n  @Input() title: string;\n  @Input() cityCode: string;\n  @Input() temp: string;\n  @Input() tempMax: string;\n  @Input() tempMin: string;\n  @Input() country: string;\n  @Input() mainWeather: string;\n  @Input() flag: string;\n  @Input() weatherIcon: string;\n\n  @Output() selectedCard = new EventEmitter();\n  @Output() deletedCard = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  selected(cityCode) {\n    this.selectedCard.emit(cityCode);\n  }\n\n  removeCity(e, cityCode) {\n    e.stopPropagation();\n    this.deletedCard.emit(cityCode);\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        &times;\n      \n    \n    \n      \n        \n          \n        \n        \n          {{title}}\n          {{temp}} °C \n          {{mainWeather}}\n          {{tempMax}} ° / {{tempMin}} °\n          \n             {{country}}\n          \n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./city-card.component.scss\n                \n                @import \"./src/variables.scss\";\n\n.card-container {\n  display: inline-block;\n  .sub-title {\n    font-size: 1.65em;\n    color: $secondary-color;\n    display: inline-block;\n  }\n  .country-name {\n    font-size: 12px;\n  }\n}\n\n.card {\n\n  &:hover {\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\n    -webkit-transform: scale(1.05);\n    transform: scale(1.05);\n    cursor: pointer;\n    -webkit-transition: ease-out 0.3s;\n    -moz-transition: ease-out 0.3s;\n    -o-transition: ease-out 0.3s;\n    transition: ease-out 0.3s;\n  }\n}\n\n[class*=\"city-\"] {\n  font-size: 4em;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    ×                                                                {{title}}          {{temp}} °C           {{mainWeather}}          {{tempMax}} ° / {{tempMin}} °                       {{country}}                              '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityCardComponent', 'selector': 'app-city-card'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'CityDropDownComponent', 'selector': 'app-city-drop-down'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'ModalComponent', 'selector': 'app-modal'}];\n    var DIRECTIVES = [{'name': 'DynamicContentDirective', 'selector': '[dynamicContent]'}];\n    var ACTUAL_COMPONENT = {'name': 'CityCardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CityComponent.html":{"url":"components/CityComponent.html","title":"component - CityComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CityComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/city/city.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-city\n            \n\n            \n                styleUrls\n                ./city.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./city.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                chart\n                            \n                            \n                                city\n                            \n                            \n                                cityId\n                            \n                            \n                                    Public\n                                cityService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                displayChart\n                            \n                            \n                                mapTimeToHours\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(cityService: CityService, router: Router, activeRoute: ActivatedRoute, appService: AppService)\n                    \n                \n                        \n                            \n                                Defined in src/app/city/city.component.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cityService\n                                                  \n                                                        \n                                                                        CityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        activeRoute\n                                                  \n                                                        \n                                                                        ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appService\n                                                  \n                                                        \n                                                                        AppService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            displayChart\n                        \n                        \n                    \n                \n            \n            \n                \ndisplayChart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/city/city.component.ts:51\n                \n            \n\n\n            \n                \n                    display the chart of the current city forecast \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mapTimeToHours\n                        \n                        \n                    \n                \n            \n            \n                \nmapTimeToHours(time: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/city/city.component.ts:44\n                \n            \n\n\n            \n                \n                    Map time to hours\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        as string to be mapped\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            2019-03-04 21:00:00 to be 9 pm\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/city/city.component.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:21\n                            \n                        \n\n                \n                    \n                        chat data will display the forecast of the current city \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            city\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         City\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:19\n                            \n                        \n\n                \n                    \n                        Current city \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cityId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:17\n                            \n                        \n\n                \n                    \n                        id of the current city that will be displayed \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cityService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CityService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:23\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { CityService } from '../shared/services/city.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { routes } from '../shared/constants/defines';\nimport { City } from '../shared/models/city';\nimport { Chart } from 'angular-highcharts';\nimport { AppService } from '../app.service';\n\n@Component({\n  selector: 'app-city',\n  templateUrl: './city.component.html',\n  styleUrls: ['./city.component.scss']\n})\nexport class CityComponent implements OnInit {\n\n  /** id of the current city that will be displayed */\n  cityId: string;\n  /** Current city */\n  city: City;\n  /** chat data will display the forecast of the current city */\n  chart: Chart;\n\n  constructor(public cityService: CityService, private router: Router, private activeRoute: ActivatedRoute, private appService: AppService) { }\n\n  ngOnInit() {\n    this.activeRoute.params.subscribe(params => {\n      this.cityId = params.id;\n      this.cityService.getCityForecast(this.cityId).subscribe(res => {\n        this.city = this.cityService.defaultCities.find(item => item.id == this.cityId);\n        this.city.forecasts = (res as City).forecasts;\n        this.displayChart();\n        this.appService.showLoader = false;\n      }, error => {\n        this.appService.showLoader = false;\n        this.router.navigate([routes.home]);\n      });\n    })\n  }\n\n  /** Map time to hours\n   * @param time as string to be mapped\n   * @example 2019-03-04 21:00:00 to be 9 pm\n   */\n  mapTimeToHours(time: string) {\n    let date = new Date(time);\n    return date.getHours() - 12 > 0 ? date.getHours() - 12 + 'pm' : date.getHours() + 'am';\n\n  }\n\n  /** display the chart of the current city forecast */\n  displayChart() {\n    let chartData = [];\n    let chartAxisData = [];\n\n    for (let index = 0; index  {\n    })\n    let chart = new Chart({\n      chart: {\n        type: 'spline'\n      },\n      title: {\n        text: 'Forecast'\n      },\n      xAxis: {\n        categories: [...chartAxisData]\n      },\n      tooltip: {\n        crosshairs: true,\n        shared: true\n      },\n      credits: {\n        enabled: false\n      },\n      responsive: {\n        rules: [{\n          condition: {\n            maxWidth: 500\n          },\n          // Make the labels less space demanding on mobile\n          chartOptions: {\n            xAxis: {\n              labels: {\n                formatter: function () {\n                  return this.value.charAt(0);\n                }\n              }\n            },\n            yAxis: {\n              labels: {\n                align: 'left',\n                x: 0,\n                y: -2\n              },\n              title: {\n                text: ''\n              }\n            }\n          }\n        }]\n      },\n      series: [{\n        type: \"spline\",\n        name: this.city.name,\n        data: [...chartData]\n      }]\n    });\n    this.chart = chart;\n  }\n\n\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n          \n            \n          \n        \n        \n          {{city.name}}\n          {{city.mainFeature.temp}}\n            {{\"city.unit.celsius\" |translate}} \n          {{city.weather[0].main}}\n          {{city.mainFeature.tempMax}}{{\"city.unit.degree\" |translate}} /\n            {{city.mainFeature.tempMin}}{{\"city.unit.degree\" |translate}}\n        \n        \n          \n            \n               {{'common.countries.'+city.countryCode | translate}}\n            \n          \n          \n            {{\"city.pressure\" |translate}} {{city.mainFeature.pressure}} {{\"city.unit.pressure\" |translate}}\n            {{\"city.humidity\" |translate}} {{city.mainFeature.humidity}}{{\"city.unit.percentage\" |translate}}\n            {{\"city.wind\" |translate}} {{city.wind.speed}} {{\"city.unit.wind\" |translate}} ,\n              {{city.wind.deg}}{{\"city.unit.degree\" |translate}}\n          \n        \n      \n      \n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./city.component.scss\n                \n                @import \"./src/variables.scss\";\n\n[class*=\"city-\"] {\n  font-size: 6em;\n}\n\n.container {\n  .card-title {\n    font-size: 2.5em;\n  }\n  .sub-title {\n    font-size: 3em;\n    color: $secondary-color;\n    display: inline-block;\n    img {\n      width: 80px;\n    }\n  }\n  .country-name {\n    font-size: 20px;\n    vertical-align: middle;\n  }\n  .details {\n    margin-top: 35px;\n    color: $secondary-color;\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                              {{city.name}}          {{city.mainFeature.temp}}            {{\"city.unit.celsius\" |translate}}           {{city.weather[0].main}}          {{city.mainFeature.tempMax}}{{\"city.unit.degree\" |translate}} /            {{city.mainFeature.tempMin}}{{\"city.unit.degree\" |translate}}                                                     {{\\'common.countries.\\'+city.countryCode | translate}}                                            {{\"city.pressure\" |translate}} {{city.mainFeature.pressure}} {{\"city.unit.pressure\" |translate}}            {{\"city.humidity\" |translate}} {{city.mainFeature.humidity}}{{\"city.unit.percentage\" |translate}}            {{\"city.wind\" |translate}} {{city.wind.speed}} {{\"city.unit.wind\" |translate}} ,              {{city.wind.deg}}{{\"city.unit.degree\" |translate}}                                                  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityCardComponent', 'selector': 'app-city-card'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'CityDropDownComponent', 'selector': 'app-city-drop-down'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'ModalComponent', 'selector': 'app-modal'}];\n    var DIRECTIVES = [{'name': 'DynamicContentDirective', 'selector': '[dynamicContent]'}];\n    var ACTUAL_COMPONENT = {'name': 'CityComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CityDropDownComponent.html":{"url":"components/CityDropDownComponent.html","title":"component - CityDropDownComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CityDropDownComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/widgets/city-drop-down/city-drop-down.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-city-drop-down\n            \n\n            \n                styleUrls\n                ./city-drop-down.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./city-drop-down.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cityService\n                            \n                            \n                                selectedId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addCity\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                selectedCity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(cityService: CityService, appService: AppService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/widgets/city-drop-down/city-drop-down.component.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cityService\n                                                  \n                                                        \n                                                                        CityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appService\n                                                  \n                                                        \n                                                                        AppService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addCity\n                        \n                        \n                    \n                \n            \n            \n                \naddCity()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/widgets/city-drop-down/city-drop-down.component.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/widgets/city-drop-down/city-drop-down.component.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            selectedCity\n                        \n                        \n                    \n                \n            \n            \n                \nselectedCity(cityId)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/widgets/city-drop-down/city-drop-down.component.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cityService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CityService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/widgets/city-drop-down/city-drop-down.component.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/widgets/city-drop-down/city-drop-down.component.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, Input } from '@angular/core';\nimport { CityService } from '../../services/city.service';\nimport { AppService } from 'src/app/app.service';\n\n@Component({\n  selector: 'app-city-drop-down',\n  templateUrl: './city-drop-down.component.html',\n  styleUrls: ['./city-drop-down.component.scss']\n})\nexport class CityDropDownComponent implements OnInit {\n  selectedId: string;\n  constructor(public cityService: CityService, private appService: AppService) { }\n\n  ngOnInit() {\n  }\n  selectedCity(cityId) {\n    this.selectedId = cityId;\n  }\n  addCity() {\n    if (this.selectedId) {\n      this.cityService.addNewCity(this.selectedId);\n    }\n    this.appService.hideModal.next();\n  }\n}\n\n    \n\n    \n        {{'common.addCity.selectCity' |translate}}\n\n  {{'common.addCity.select' |translate}}\n  {{city.name}}\n\n\n   {{'common.addCity.btn'| translate}} \n\n    \n\n    \n                \n                    ./city-drop-down.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{\\'common.addCity.selectCity\\' |translate}}  {{\\'common.addCity.select\\' |translate}}  {{city.name}}   {{\\'common.addCity.btn\\'| translate}} '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityCardComponent', 'selector': 'app-city-card'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'CityDropDownComponent', 'selector': 'app-city-drop-down'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'ModalComponent', 'selector': 'app-modal'}];\n    var DIRECTIVES = [{'name': 'DynamicContentDirective', 'selector': '[dynamicContent]'}];\n    var ACTUAL_COMPONENT = {'name': 'CityDropDownComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/CityResolverGuard.html":{"url":"guards/CityResolverGuard.html","title":"guard - CityResolverGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    CityResolverGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/city/city-resolver.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(cityService: CityService, appService: AppService)\n                    \n                \n                        \n                            \n                                Defined in src/app/city/city-resolver.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cityService\n                                                  \n                                                        \n                                                                        CityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appService\n                                                  \n                                                        \n                                                                        AppService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resolve\n                        \n                        \n                    \n                \n            \n            \n                \nresolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/app/city/city-resolver.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { CityService } from '../shared/services/city.service';\nimport { map } from 'rxjs/operators';\nimport { AppService } from '../app.service';\nimport { of } from 'rxjs/internal/observable/of';\n\n@Injectable()\nexport class CityResolverGuard implements Resolve {\n  constructor(private cityService: CityService, private appService: AppService) {\n  }\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    this.appService.showLoader = true;\n    if (this.cityService.cities && this.cityService.defaultCities) {\n      return of(true);\n    }\n    return this.cityService.getCities().pipe(map(_ => {\n    }));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CityService.html":{"url":"injectables/CityService.html","title":"injectable - CityService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/city.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                allCities\n                            \n                            \n                                cities\n                            \n                            \n                                defaultCities\n                            \n                            \n                                selectedCity\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addNewCity\n                            \n                            \n                                getCities\n                            \n                            \n                                getCitiesWeather\n                            \n                            \n                                getCityForecast\n                            \n                            \n                                getCityWeather\n                            \n                            \n                                getSelectedCities\n                            \n                            \n                                mapCityForecast\n                            \n                            \n                                mapCityWeather\n                            \n                            \n                                removeCity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, storageService: StorageService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/city.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        StorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addNewCity\n                        \n                        \n                    \n                \n            \n            \n                \naddNewCity(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/city.service.ts:210\n                \n            \n\n\n            \n                \n                    Add new city to the home by getting it's id and add it to the default cities\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new city id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCities\n                        \n                        \n                    \n                \n            \n            \n                \ngetCities()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/city.service.ts:176\n                \n            \n\n\n            \n                \n                    To get mapped cities data model from openWeather\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        List of cities mapped with weather from openWeather\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCitiesWeather\n                        \n                        \n                    \n                \n            \n            \n                \ngetCitiesWeather(ids: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/city.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCityForecast\n                        \n                        \n                    \n                \n            \n            \n                \ngetCityForecast(cityId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/city.service.ts:103\n                \n            \n\n\n            \n                \n                    To get mapped city data model from any item\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cityId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Object of type City with it's forecast\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCityWeather\n                        \n                        \n                    \n                \n            \n            \n                \ngetCityWeather(cityId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/city.service.ts:28\n                \n            \n\n\n            \n                \n                    To get city data using Http request\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cityId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        represent the id of the city\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSelectedCities\n                        \n                        \n                    \n                \n            \n            \n                \ngetSelectedCities(ids)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/city.service.ts:201\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mapCityForecast\n                        \n                        \n                    \n                \n            \n            \n                \nmapCityForecast(response: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/city.service.ts:115\n                \n            \n\n\n            \n                \n                    To get mapped city data model from any item\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        represent the Http response of the city forecast\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         City\n\n                    \n                    \n                        Object of type City with it's forecast\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mapCityWeather\n                        \n                        \n                    \n                \n            \n            \n                \nmapCityWeather(item: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/city.service.ts:40\n                \n            \n\n\n            \n                \n                    To get mapped city data model from any item\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        represent the id of the city\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         City\n\n                    \n                    \n                        Object of type City\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeCity\n                        \n                        \n                    \n                \n            \n            \n                \nremoveCity(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/city.service.ts:228\n                \n            \n\n\n            \n                \n                    Remove specfic city card from the home by selecting it from default services array and remove it \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the city will be deleted\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            allCities\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         City[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/services/city.service.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cities\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         City[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/services/city.service.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            defaultCities\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         City[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/services/city.service.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedCity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         City\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/services/city.service.ts:16\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { API } from '../constants/routes-config';\nimport { HttpClient } from '@angular/common/http';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { City } from '../models/city';\nimport * as JsonQuery from 'jsonpath/jsonpath';\nimport { JSON_PATHS } from '../constants/defines';\nimport { IWeather } from '../interface/iWeather';\nimport { Forecast } from '../models/forecast';\nimport { StorageService } from './storage.service';\n\n@Injectable()\nexport class CityService {\n\n  selectedCity: City;\n  allCities: City[];\n  cities: City[];\n  defaultCities: City[];\n  constructor(private http: HttpClient, private storageService: StorageService) {\n    this.cities = new Array();\n  }\n\n  /**\n  * To get city data using Http request\n   * @param  {string} cityId represent the id of the city\n   */\n  getCityWeather(cityId: string): Observable {\n    const url = API.OpenWeather.CityWeather.replace('{city}', cityId);\n    return this.http.get(url).pipe(map(res => {\n      return this.mapCityWeather(res);\n    }));\n  }\n\n  /**\n    * To get mapped city data model from any item\n     * @param  {any} item represent the id of the city\n     * @returns Object of type City\n     */\n  mapCityWeather(item: any): City {\n    let city = new City();\n\n    city.id = JsonQuery.value(item, JSON_PATHS.City.id) || null;\n    city.name = JsonQuery.value(item, JSON_PATHS.City.name) || null;\n    city.code = JsonQuery.value(item, JSON_PATHS.City.code) || null;\n    city.countryCode = JsonQuery.value(item, JSON_PATHS.City.countryCode) || null;\n    city.dct = JsonQuery.value(item, JSON_PATHS.City.dt) || null;\n    city.clouds = JsonQuery.value(item, JSON_PATHS.City.clouds) || null;\n    city.coord = {\n      long: JsonQuery.value(item, JSON_PATHS.City.lon) || null,\n      lat: JsonQuery.value(item, JSON_PATHS.City.lat) || null\n    };\n\n    city.mainFeature = {\n      humidity: JsonQuery.value(item, JSON_PATHS.City.humidity) || null,\n      grnd_level: JsonQuery.value(item, JSON_PATHS.City.grnd_level) || null,\n      sea_level: JsonQuery.value(item, JSON_PATHS.City.sea_level) || null,\n      pressure: JsonQuery.value(item, JSON_PATHS.City.pressure) || null,\n      temp: JsonQuery.value(item, JSON_PATHS.City.temp) || null,\n      tempMax: JsonQuery.value(item, JSON_PATHS.City.tempMax) || null,\n      tempMin: JsonQuery.value(item, JSON_PATHS.City.tempMin) || null\n    };\n    city.wind = {\n      deg: JsonQuery.value(item, JSON_PATHS.City.windSpeed) || null,\n      speed: JsonQuery.value(item, JSON_PATHS.City.windDegree) || null\n    }\n\n    city.sunrise = JsonQuery.value(item, JSON_PATHS.City.sunrise) ? new Date(JsonQuery.value(item, JSON_PATHS.City.sunrise)) : null;\n    city.sunset = JsonQuery.value(item, JSON_PATHS.City.sunset) ? new Date(JsonQuery.value(item, JSON_PATHS.City.sunset)) : null;\n\n    const weatherData = JsonQuery.value(item, JSON_PATHS.City.weather) as Array || null;\n    if (weatherData) {\n      city.weather = new Array();\n      weatherData.map(el => {\n        let weather: IWeather =\n        {\n          id: JsonQuery.value(el, JSON_PATHS.City.weatherId) || null,\n          icon: JsonQuery.value(el, JSON_PATHS.City.weatherIcon) || null,\n          main: JsonQuery.value(el, JSON_PATHS.City.weatherMain) || null,\n          description: JsonQuery.value(el, JSON_PATHS.City.weatherDescription) || null\n        }\n        city.weather.push(weather);\n      })\n    }\n\n    return city;\n  }\n\n  getCitiesWeather(ids: string): Observable {\n    const url = API.OpenWeather.CitiesWeather.replace('{ids}', ids);\n    return this.http.get(url).pipe(map((res: any) => {\n      return (res.list as Array).map(city => {\n        return this.mapCityWeather(city);\n      })\n    }));\n  }\n\n  /**\n  * To get mapped city data model from any item\n   * @param  {any} response represent the Http response of the city forecast\n   * @returns Object of type City with it's forecast\n   */\n  getCityForecast(cityId: string): Observable {\n    const url = API.OpenWeather.CityForecast.replace('{city}', cityId);\n    return this.http.get(url).pipe(map(res => {\n      return this.mapCityForecast(res);\n    }));\n  }\n\n  /**\n    * To get mapped city data model from any item\n     * @param  {any} response represent the Http response of the city forecast\n     * @returns Object of type City with it's forecast\n     */\n  mapCityForecast(response: any): City {\n    let city: City = JsonQuery.value(response, JSON_PATHS.City.city);\n\n    if (city) {\n\n      let forecasts = JsonQuery.value(response, JSON_PATHS.City.forecasts);\n      if (forecasts) {\n        city.forecasts = new Array();\n        forecasts.map(el => {\n          let forecast: Forecast = {\n            wind: {\n              deg: JsonQuery.value(el, JSON_PATHS.City.windDegree) || null,\n              speed: JsonQuery.value(el, JSON_PATHS.City.windSpeed) || null\n            },\n            clouds: JsonQuery.value(el, JSON_PATHS.City.clouds) || null,\n            dct: JsonQuery.value(el, JSON_PATHS.City.dtText) || null,\n            mainFeature: {\n              grnd_level: JsonQuery.value(el, JSON_PATHS.City.grnd_level) || null,\n              humidity: JsonQuery.value(el, JSON_PATHS.City.humidity) || null,\n              pressure: JsonQuery.value(el, JSON_PATHS.City.pressure) || null,\n              sea_level: JsonQuery.value(el, JSON_PATHS.City.sea_level) || null,\n              temp: JsonQuery.value(el, JSON_PATHS.City.temp) || null,\n              tempMax: JsonQuery.value(el, JSON_PATHS.City.tempMax) || null,\n              tempMin: JsonQuery.value(el, JSON_PATHS.City.tempMin) || null,\n              temp_kf: JsonQuery.value(el, JSON_PATHS.City.temp_kf) || null\n            },\n            rain: {\n              one_hour: el[JSON_PATHS.City.rain] ? el[JSON_PATHS.City.rain][JSON_PATHS.City._1h] : null,\n              three_hours: el[JSON_PATHS.City.rain] ? el[JSON_PATHS.City.rain][JSON_PATHS.City._1h] : null\n            },\n            snow: {\n              one_hour: el[JSON_PATHS.City.snow] ? el[JSON_PATHS.City.snow][JSON_PATHS.City._1h] : null,\n              three_hours: el[JSON_PATHS.City.snow] ? el[JSON_PATHS.City.snow][JSON_PATHS.City._1h] : null\n            }\n          }\n          const weatherData = JsonQuery.value(el, JSON_PATHS.City.weather) as Array || null;\n          if (weatherData) {\n            forecast.weather = new Array();\n            weatherData.map(item => {\n              let weather: IWeather =\n              {\n                id: JsonQuery.value(item, JSON_PATHS.City.weatherId) || null,\n                icon: JsonQuery.value(item, JSON_PATHS.City.weatherIcon) || null,\n                main: JsonQuery.value(item, JSON_PATHS.City.weatherMain) || null,\n                description: JsonQuery.value(item, JSON_PATHS.City.weatherDescription) || null\n              }\n              forecast.weather.push(weather);\n            })\n          }\n          city.forecasts.push(forecast);\n        })\n      }\n    }\n\n    return city;\n  }\n\n  /**\n  * To get mapped cities data model from openWeather\n   * @returns List of cities mapped with weather from openWeather\n   */\n  getCities() {\n    const cities = this.storageService.getLocalStorage('cities');\n    if (cities) {\n      this.cities = cities;\n    }\n    return this.http.get(API.Cities.Data).pipe(map(res => {\n      this.allCities = JSON.parse(JSON.stringify(res)) as Array;\n      this.cities = res as Array;\n      let ids = this.storageService.getLocalStorage('selectedCitiesIds');\n      if (ids) {\n\n        return ids;\n      }\n      return this.cities.splice(0, 5).map(el => {\n        return el.id;\n      });\n    }), mergeMap((ids) => {\n      return this.getSelectedCities(ids).pipe(map(_ => {\n        this.storageService.setLocalStorage('selectedCitiesIds', ids);\n        this.storageService.setLocalStorage('cities', this.cities);\n      }));\n    })\n    );\n  }\n\n  getSelectedCities(ids) {\n    return this.getCitiesWeather(ids.toString()).pipe(map(res => {\n      this.defaultCities = res as Array;\n    }))\n  }\n\n  /** Add new city to the home by getting it's id and add it to the default cities\n   * @param id new city id\n   */\n  addNewCity(id: string) {\n    this.getCityWeather(id).subscribe(city => {\n      let deletedCity = this.cities.findIndex(item => item.id == id);\n      this.cities.splice(deletedCity, 1);\n      if(!this.defaultCities){\n        this.defaultCities = new Array();\n      }\n      this.defaultCities.push(city as City);\n      let ids = this.storageService.getLocalStorage('selectedCitiesIds');\n      ids.push(+id)\n      this.storageService.setLocalStorage('selectedCitiesIds', ids);\n      this.storageService.setLocalStorage('cities', this.cities);\n    })\n  }\n\n  /** Remove specfic city card from the home by selecting it from default services array and remove it \n   * @param id the id of the city will be deleted\n   */\n  removeCity(id: string) {\n    let deletedCity = this.defaultCities.find(item => item.id == id);\n    let index = this.defaultCities.indexOf(deletedCity);\n    this.defaultCities.splice(index, 1);\n    let ids = this.storageService.getLocalStorage('selectedCitiesIds') as Array;\n    let cityId = ids.findIndex(item => item == id);\n    ids.splice(cityId, 1);\n    this.storageService.setLocalStorage('selectedCitiesIds', ids);\n    const removedCity = this.allCities.find(city => {\n      return city.id == id;\n    })\n    this.cities.push(removedCity);\n    this.storageService.setLocalStorage('cities', this.cities);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CityServiceMock.html":{"url":"classes/CityServiceMock.html","title":"class - CityServiceMock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CityServiceMock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mock/service/city-service.mock.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                allCities\n                            \n                            \n                                cities\n                            \n                            \n                                defaultCities\n                            \n                            \n                                selectedCity\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addNewCity\n                            \n                            \n                                getCities\n                            \n                            \n                                getCitiesWeather\n                            \n                            \n                                getCityForecast\n                            \n                            \n                                getCityWeather\n                            \n                            \n                                getSelectedCities\n                            \n                            \n                                mapCityForecast\n                            \n                            \n                                mapCityWeather\n                            \n                            \n                                removeCity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            allCities\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         City[]\n\n                        \n                    \n                    \n                        \n                            Default value : new Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/mock/service/city-service.mock.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cities\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         City[]\n\n                        \n                    \n                    \n                        \n                            Default value : new Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/mock/service/city-service.mock.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            defaultCities\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         City[]\n\n                        \n                    \n                    \n                        \n                            Default value : [{\n        clouds: '',\n        code: '',\n        coord: { lat: '', long: '' },\n        countryCode: '',\n        dct: new Date(),\n        id: '1',\n        mainFeature: { temp_kf: '', tempMin: '', tempMax: '', temp: '', sea_level: '', pressure: '', humidity: '', grnd_level: '', },\n        name: '',\n        rain: { three_hours: '', one_hour: '' },\n        snow: { one_hour: '', three_hours: '', },\n        sunrise: new Date(),\n        sunset: new Date(),\n        weather: [{\n            description: '',\n            icon: '',\n            id: '',\n            main: ''\n        }],\n        wind: { speed: '', deg: '' },\n        forecasts: [\n            {\n                clouds: '',\n                dct: '',\n                mainFeature: {\n                    grnd_level: '',\n                    humidity: '',\n                    pressure: '',\n                    sea_level: '',\n                    temp: '',\n                    tempMax: '',\n                    tempMin: '',\n                    temp_kf: ''\n                },\n                rain: { one_hour: '', three_hours: '' },\n                snow: { one_hour: '', three_hours: '' },\n                weather: [{\n                    description: '',\n                    icon: '',\n                    id: '',\n                    main: ''\n                }],\n                wind: { deg: '', speed: '' }\n\n            }]\n    }]\n                        \n                    \n                        \n                            \n                                    Defined in src/app/mock/service/city-service.mock.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedCity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         City\n\n                        \n                    \n                    \n                        \n                            Default value : new City()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/mock/service/city-service.mock.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addNewCity\n                        \n                        \n                    \n                \n            \n            \n                \naddNewCity(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mock/service/city-service.mock.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCities\n                        \n                        \n                    \n                \n            \n            \n                \ngetCities()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mock/service/city-service.mock.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCitiesWeather\n                        \n                        \n                    \n                \n            \n            \n                \ngetCitiesWeather()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mock/service/city-service.mock.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCityForecast\n                        \n                        \n                    \n                \n            \n            \n                \ngetCityForecast()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mock/service/city-service.mock.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCityWeather\n                        \n                        \n                    \n                \n            \n            \n                \ngetCityWeather(cityId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mock/service/city-service.mock.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cityId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSelectedCities\n                        \n                        \n                    \n                \n            \n            \n                \ngetSelectedCities(ids)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mock/service/city-service.mock.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mapCityForecast\n                        \n                        \n                    \n                \n            \n            \n                \nmapCityForecast()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mock/service/city-service.mock.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mapCityWeather\n                        \n                        \n                    \n                \n            \n            \n                \nmapCityWeather()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mock/service/city-service.mock.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeCity\n                        \n                        \n                    \n                \n            \n            \n                \nremoveCity(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mock/service/city-service.mock.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Subject } from \"rxjs/internal/Subject\";\nimport { City } from 'src/app/shared/models/city';\nimport { of } from 'rxjs/internal/observable/of';\n\nexport class CityServiceMock {\n    selectedCity: City = new City();\n    allCities: City[] = new Array();\n    cities: City[] = new Array();\n    defaultCities: City[] = [{\n        clouds: '',\n        code: '',\n        coord: { lat: '', long: '' },\n        countryCode: '',\n        dct: new Date(),\n        id: '1',\n        mainFeature: { temp_kf: '', tempMin: '', tempMax: '', temp: '', sea_level: '', pressure: '', humidity: '', grnd_level: '', },\n        name: '',\n        rain: { three_hours: '', one_hour: '' },\n        snow: { one_hour: '', three_hours: '', },\n        sunrise: new Date(),\n        sunset: new Date(),\n        weather: [{\n            description: '',\n            icon: '',\n            id: '',\n            main: ''\n        }],\n        wind: { speed: '', deg: '' },\n        forecasts: [\n            {\n                clouds: '',\n                dct: '',\n                mainFeature: {\n                    grnd_level: '',\n                    humidity: '',\n                    pressure: '',\n                    sea_level: '',\n                    temp: '',\n                    tempMax: '',\n                    tempMin: '',\n                    temp_kf: ''\n                },\n                rain: { one_hour: '', three_hours: '' },\n                snow: { one_hour: '', three_hours: '' },\n                weather: [{\n                    description: '',\n                    icon: '',\n                    id: '',\n                    main: ''\n                }],\n                wind: { deg: '', speed: '' }\n\n            }]\n    }];\n    getCityWeather(cityId: string) {\n        return of({});\n    }\n    mapCityWeather() {\n        return new City();\n    }\n\n    getCitiesWeather() {\n        return of({});\n    }\n    getCityForecast() {\n        return of(this.defaultCities[0]);\n    }\n    mapCityForecast() {\n        return new City();\n    }\n    getCities() {\n        return of({});\n    }\n    getSelectedCities(ids) {\n        return of({});\n\n    }\n    addNewCity(id: string) { }\n    removeCity(id: string) { }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomTranslateLoader.html":{"url":"classes/CustomTranslateLoader.html","title":"class - CustomTranslateLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomTranslateLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/utils/custom-translate-loader.ts\n        \n\n\n            \n                Extends\n            \n            \n                    TranslateHttpLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                customHttp\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTranslation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, prefix?: string, suffix?: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/utils/custom-translate-loader.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prefix\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        suffix\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            customHttp\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/utils/custom-translate-loader.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTranslation\n                        \n                        \n                    \n                \n            \n            \n                \ngetTranslation(lang?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/utils/custom-translate-loader.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lang\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { HttpClient } from '@angular/common/http';\n\nexport class CustomTranslateLoader extends TranslateHttpLoader {\n    private customHttp;\n    constructor(http: HttpClient, prefix?: string, suffix?: string) {\n        super(http, prefix, suffix);\n        this.customHttp = http;\n    }\n\n    getTranslation(lang?: string) {\n            return this.customHttp.get(this.prefix + lang + this.suffix);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DynamicComponent.html":{"url":"classes/DynamicComponent.html","title":"class - DynamicComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DynamicComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/utils/dynamic-content.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addComponent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/utils/dynamic-content.ts:4\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addComponent\n                        \n                        \n                    \n                \n            \n            \n                \naddComponent(container: ViewContainerRef, componentFactoryResolver: ComponentFactoryResolver, component)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/utils/dynamic-content.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                ViewContainerRef\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    componentFactoryResolver\n                                    \n                                                ComponentFactoryResolver\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    component\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ViewContainerRef, ComponentFactoryResolver } from '@angular/core';\n\n\nexport class DynamicComponent {\n    constructor() {\n\n    }\n\n    addComponent(container: ViewContainerRef, componentFactoryResolver: ComponentFactoryResolver, component) {\n        const componentFactory = componentFactoryResolver.resolveComponentFactory(component);\n        container.clear();\n        const componentRef = container.createComponent(componentFactory);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DynamicContentDirective.html":{"url":"directives/DynamicContentDirective.html","title":"directive - DynamicContentDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  DynamicContentDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/directives/dynamic-content.directive.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [dynamicContent]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                viewContainerRef\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(viewContainerRef: ViewContainerRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/directives/dynamic-content.directive.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        viewContainerRef\n                                                  \n                                                        \n                                                                        ViewContainerRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            viewContainerRef\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ViewContainerRef\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/directives/dynamic-content.directive.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n    \n\n\n    \n        import { Directive, ViewContainerRef } from '@angular/core';\n\n@Directive({ selector: '[dynamicContent]' })\nexport class DynamicContentDirective {\n    constructor(public viewContainerRef: ViewContainerRef) { }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Forecast.html":{"url":"classes/Forecast.html","title":"class - Forecast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Forecast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/forecast.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IForecast\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                clouds\n                            \n                            \n                                dct\n                            \n                            \n                                mainFeature\n                            \n                            \n                                rain\n                            \n                            \n                                snow\n                            \n                            \n                                    Optional\n                                weather\n                            \n                            \n                                wind\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clouds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/models/forecast.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dct\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/models/forecast.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mainFeature\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/models/forecast.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rain\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/models/forecast.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snow\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/models/forecast.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            weather\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/models/forecast.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wind\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/models/forecast.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IForecast } from '../interface/iForecast';\n\nexport class Forecast implements IForecast {\n    clouds: string; dct: string;\n    snow: import(\"../interface/iVolume\").IVolume;\n    rain: import(\"../interface/iVolume\").IVolume;\n    wind: import(\"../interface/iWind\").IWind;\n    mainFeature: import(\"../interface/iMain\").IMain;\n    weather?: import(\"../interface/iWeather\").IWeather[];\n\n\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HomeComponent.html":{"url":"components/HomeComponent.html","title":"component - HomeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  HomeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/home/home.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-home\n            \n\n            \n                styleUrls\n                ./home.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./home.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                appService\n                            \n                            \n                                    Public\n                                cityService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addCity\n                            \n                            \n                                deleteCity\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                select\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(cityService: CityService, appService: AppService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/home/home.component.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cityService\n                                                  \n                                                        \n                                                                        CityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appService\n                                                  \n                                                        \n                                                                        AppService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addCity\n                        \n                        \n                    \n                \n            \n            \n                \naddCity()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/home.component.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteCity\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteCity(id)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/home.component.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/home.component.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            select\n                        \n                        \n                    \n                \n            \n            \n                \nselect(id)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/home.component.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            appService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AppService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/home.component.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cityService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CityService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/home.component.ts:15\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { CityService } from '../shared/services/city.service';\nimport { AppService } from '../app.service';\nimport { CityDropDownComponent } from '../shared/widgets/city-drop-down/city-drop-down.component';\nimport { Router } from '@angular/router';\nimport { routes } from '../shared/constants/defines';\n\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n  constructor(public cityService: CityService,\n    public appService: AppService,\n    private router: Router) {\n\n  }\n\n  ngOnInit(): void {\n    this.appService.showLoader = true;\n    this.cityService.getCities().subscribe(_ => {\n      this.appService.showLoader = false;\n    });\n\n  }\n\n  select(id) {\n    this.router.navigate([routes.city, id]);\n  }\n\n  addCity() {\n    this.appService.modalSubject.next(CityDropDownComponent);\n  }\n\n  deleteCity(id) {\n    this.cityService.removeCity(id);\n  }\n}\n\n    \n\n    \n        \n  \n    {{'home.addButton' | translate}}\n  \n  \n    \n    {{'home.noCities' |translate}}\n  \n  \n  \n\n    \n\n    \n                \n                    ./home.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{\\'home.addButton\\' | translate}}            {{\\'home.noCities\\' |translate}}      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityCardComponent', 'selector': 'app-city-card'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'CityDropDownComponent', 'selector': 'app-city-drop-down'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'ModalComponent', 'selector': 'app-modal'}];\n    var DIRECTIVES = [{'name': 'DynamicContentDirective', 'selector': '[dynamicContent]'}];\n    var ACTUAL_COMPONENT = {'name': 'HomeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICity.html":{"url":"interfaces/ICity.html","title":"interface - ICity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ICity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interface/iCity.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clouds\n                                \n                                \n                                        code\n                                \n                                \n                                        coord\n                                \n                                \n                                        countryCode\n                                \n                                \n                                        dct\n                                \n                                \n                                        id\n                                \n                                \n                                        mainFeature\n                                \n                                \n                                        name\n                                \n                                \n                                        rain\n                                \n                                \n                                        snow\n                                \n                                \n                                        sunrise\n                                \n                                \n                                        sunset\n                                \n                                \n                                        weather\n                                \n                                \n                                        wind\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clouds\n                                    \n                                \n                                \n                                    \n                                        clouds:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        coord\n                                    \n                                \n                                \n                                    \n                                        coord:         ICoord\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ICoord\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        countryCode\n                                    \n                                \n                                \n                                    \n                                        countryCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dct\n                                    \n                                \n                                \n                                    \n                                        dct:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mainFeature\n                                    \n                                \n                                \n                                    \n                                        mainFeature:         IMain\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IMain\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rain\n                                    \n                                \n                                \n                                    \n                                        rain:         IVolume\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IVolume\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        snow\n                                    \n                                \n                                \n                                    \n                                        snow:         IVolume\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IVolume\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sunrise\n                                    \n                                \n                                \n                                    \n                                        sunrise:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sunset\n                                    \n                                \n                                \n                                    \n                                        sunset:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weather\n                                    \n                                \n                                \n                                    \n                                        weather:         IWeather[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IWeather[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wind\n                                    \n                                \n                                \n                                    \n                                        wind:         IWind\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IWind\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IVolume } from './iVolume';\nimport { IWind } from './iWind';\nimport { IMain } from './iMain';\nimport { IWeather } from './iWeather';\nimport { ICoord } from './iCoord';\n\n// City Interface\nexport interface ICity {\n    // city ID\n    id: string;\n    // name of the city\n    name: string;\n    // code of the city\n    code: string;\n    // Cloudiness, %\n    clouds: string;\n    // Time of data calculation, unix, UTC\n    dct: Date;\n    // Country code (GB, JP etc.)\n    countryCode: string;\n    // sunrise\n    sunrise: Date;\n    // sunset    \n    sunset: Date;\n    // snow rate\n    snow: IVolume;\n    // rain rate\n    rain: IVolume;\n    // wind speed & directions\n    wind: IWind;\n    // represents the temp , pressure, humidity , temp_min, temp_max, sea_level, grnd_level\n    mainFeature: IMain;\n    // Weather condition\n    weather: IWeather[];\n    // represet City geo location longitude,latitude\n    coord: ICoord;\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICoord.html":{"url":"interfaces/ICoord.html","title":"interface - ICoord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ICoord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interface/iCoord.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        lat\n                                \n                                \n                                        long\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lat\n                                    \n                                \n                                \n                                    \n                                        lat:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        long\n                                    \n                                \n                                \n                                    \n                                        long:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ICoord {\n    // long represet City geo location, longitude\n    long: string;\n    // lat represent City geo location, latitude\n    lat: string;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IForecast.html":{"url":"interfaces/IForecast.html","title":"interface - IForecast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IForecast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interface/iForecast.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clouds\n                                \n                                \n                                        dct\n                                \n                                \n                                        mainFeature\n                                \n                                \n                                        rain\n                                \n                                \n                                        snow\n                                \n                                \n                                            Optional\n                                        weather\n                                \n                                \n                                        wind\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clouds\n                                    \n                                \n                                \n                                    \n                                        clouds:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dct\n                                    \n                                \n                                \n                                    \n                                        dct:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mainFeature\n                                    \n                                \n                                \n                                    \n                                        mainFeature:         IMain\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IMain\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rain\n                                    \n                                \n                                \n                                    \n                                        rain:         IVolume\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IVolume\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        snow\n                                    \n                                \n                                \n                                    \n                                        snow:         IVolume\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IVolume\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weather\n                                    \n                                \n                                \n                                    \n                                        weather:         IWeather[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IWeather[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wind\n                                    \n                                \n                                \n                                    \n                                        wind:         IWind\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IWind\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IVolume } from './iVolume';\nimport { IWind } from './iWind';\nimport { IMain } from './iMain';\nimport { IWeather } from './iWeather';\n\n// Forecast Interface\nexport interface IForecast {\n    // Cloudiness, %\n    clouds: string;\n    // Time of data calculation, unix, UTC\n    dct: string;\n    // snow rate\n    snow: IVolume;\n    // rain rate\n    rain: IVolume;\n    // wind speed & directions\n    wind: IWind;\n    // represents the temp , pressure, humidity , temp_min, temp_max, sea_level, grnd_level\n    mainFeature: IMain;\n    // Weather condition\n    weather?: IWeather[];\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMain.html":{"url":"interfaces/IMain.html","title":"interface - IMain","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IMain\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interface/iMain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        grnd_level\n                                \n                                \n                                        humidity\n                                \n                                \n                                        pressure\n                                \n                                \n                                        sea_level\n                                \n                                \n                                        temp\n                                \n                                \n                                            Optional\n                                        temp_kf\n                                \n                                \n                                        tempMax\n                                \n                                \n                                        tempMin\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        grnd_level\n                                    \n                                \n                                \n                                    \n                                        grnd_level:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        humidity\n                                    \n                                \n                                \n                                    \n                                        humidity:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pressure\n                                    \n                                \n                                \n                                    \n                                        pressure:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sea_level\n                                    \n                                \n                                \n                                    \n                                        sea_level:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        temp\n                                    \n                                \n                                \n                                    \n                                        temp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        temp_kf\n                                    \n                                \n                                \n                                    \n                                        temp_kf:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tempMax\n                                    \n                                \n                                \n                                    \n                                        tempMax:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tempMin\n                                    \n                                \n                                \n                                    \n                                        tempMin:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IMain {\n    // Temperature. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit\n    temp: string;\n    // Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa\n    pressure: string;\n    // Humidity, %\n    humidity: string;\n    // Minimum temperature at the moment. This is deviation from current temp that is possible for large cities\n    // and megalopolises geographically expanded (use these parameter optionally). Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit.\n    tempMin: string;\n    // Maximum temperature at the moment. This is deviation from current temp that is possible for large cities \n    // and megalopolises geographically expanded (use these parameter optionally). Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit.\n    tempMax: string;\n    // Atmospheric pressure on the sea level, hPa\n    sea_level: string;\n    // Atmospheric pressure on the ground level, hPa\n    grnd_level: string;\n    // \n    temp_kf?: string;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IVolume.html":{"url":"interfaces/IVolume.html","title":"interface - IVolume","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IVolume\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interface/iVolume.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        one_hour\n                                \n                                \n                                        three_hours\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        one_hour\n                                    \n                                \n                                \n                                    \n                                        one_hour:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        three_hours\n                                    \n                                \n                                \n                                    \n                                        three_hours:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IVolume {\n    // Volume for the last 1 hour, mm\n    one_hour: string;\n    // Volume for the last 3 hour, mm\n    three_hours: string;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IWeather.html":{"url":"interfaces/IWeather.html","title":"interface - IWeather","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IWeather\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interface/iWeather.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        icon\n                                \n                                \n                                        id\n                                \n                                \n                                        main\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        main\n                                    \n                                \n                                \n                                    \n                                        main:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IWeather {\n    // Weather condition id\n    id: string;\n    // Group of weather parameters (Rain, Snow, Extreme etc.)\n    main: string;\n    // Weather condition within the group\n    description: string;\n    // Weather icon id\n    icon: string;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IWind.html":{"url":"interfaces/IWind.html","title":"interface - IWind","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IWind\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interface/iWind.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        deg\n                                \n                                \n                                        speed\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deg\n                                    \n                                \n                                \n                                    \n                                        deg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        speed\n                                    \n                                \n                                \n                                    \n                                        speed:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IWind {\n    // Wind speed. Unit Default: meter/sec, Metric: meter/sec, Imperial: miles/hour.\n    speed: string;\n    // Wind direction, degrees (meteorological)\n    deg: string;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ModalComponent.html":{"url":"components/ModalComponent.html","title":"component - ModalComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ModalComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/modal/modal.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-modal\n            \n\n            \n                styleUrls\n                ./modal.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./modal.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                component\n                            \n                            \n                                container\n                            \n                            \n                                isLoadContent\n                            \n                            \n                                isModalShown\n                            \n                            \n                                modal\n                            \n                            \n                                modalContent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hideModal\n                            \n                            \n                                ngAfterViewChecked\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onHidden\n                            \n                            \n                                    Public\n                                showModal\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(modalService: BsModalService, cd: ChangeDetectorRef, componentFactoryResolver: ComponentFactoryResolver)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/modal/modal.component.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        modalService\n                                                  \n                                                        \n                                                                    BsModalService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cd\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        componentFactoryResolver\n                                                  \n                                                        \n                                                                        ComponentFactoryResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/modal/modal.component.ts:16\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hideModal\n                        \n                        \n                    \n                \n            \n            \n                \nhideModal()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/modal/modal.component.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewChecked\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewChecked()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/modal/modal.component.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/modal/modal.component.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onHidden\n                        \n                        \n                    \n                \n            \n            \n                \nonHidden()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/modal/modal.component.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            showModal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showModal(component)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/modal/modal.component.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    component\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            component\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/modal/modal.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            container\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DynamicContentDirective\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(DynamicContentDirective)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/modal/modal.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLoadContent\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/modal/modal.component.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isModalShown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/modal/modal.component.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ModalDirective\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('Modal')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/modal/modal.component.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modalContent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DynamicComponent\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/modal/modal.component.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, ViewChild, Input, ComponentFactoryResolver, AfterViewInit, ChangeDetectorRef } from '@angular/core';\nimport { BsModalService, ModalDirective } from 'ngx-bootstrap/modal';\nimport { DynamicComponent } from '../../utils/dynamic-content';\nimport { DynamicContentDirective } from '../../directives/dynamic-content.directive';\n\n@Component({\n  selector: 'app-modal',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.scss']\n})\nexport class ModalComponent implements OnInit {\n\n  @ViewChild('Modal') modal: ModalDirective;\n  isModalShown = false;\n  isLoadContent = false;\n  @Input() title: string;\n  modalContent: DynamicComponent;\n  component;\n  @ViewChild(DynamicContentDirective) container: DynamicContentDirective;\n\n  constructor(private modalService: BsModalService,\n    private cd: ChangeDetectorRef,\n    private componentFactoryResolver: ComponentFactoryResolver) {\n    this.modalContent = new DynamicComponent();\n  }\n\n  ngOnInit() {\n  }\n\n  ngAfterViewChecked(): void {\n    if (this.isLoadContent) {\n      this.isLoadContent = false;\n      this.modalContent.addComponent(this.container.viewContainerRef, this.componentFactoryResolver, this.component);\n      this.cd.detectChanges();\n    }\n  }\n\n  public showModal(component): void {\n    this.component = component;\n    this.isLoadContent = true;\n    this.isModalShown = true;\n  }\n\n  hideModal(): void {\n    this.isLoadContent = false;\n    this.modalContent = new DynamicComponent();\n    this.isModalShown = false;\n    this.modal.hide();\n\n  }\n\n  onHidden(): void {\n    this.isModalShown = false;\n  }\n\n}\n\n    \n\n    \n        \n  \n  \n    \n      \n        {{title}}\n        \n          &times;\n        \n      \n      \n        \n      \n    \n  \n\n\n    \n\n    \n                \n                    ./modal.component.scss\n                \n                .modal-header{\n    border-bottom: none;\n}\n\n\n.vertical-alignment-helper {\n    display:table;\n    height: 100%;\n    width: 100%;\n    pointer-events:none; /* This makes sure that we can still click outside of the modal to close it */\n}\n.vertical-align-center {\n    /* To center vertically */\n    display: table-cell;\n    vertical-align: middle;\n    pointer-events:none;\n}\n.modal-content {\n    /* Bootstrap sets the size of the modal in the modal-dialog class, we need to inherit it */\n    width:inherit;\n    max-width:inherit; /* For Bootstrap 4 - to avoid the modal window stretching full width */\n    height:inherit;\n    /* To center horizontally */\n    margin: 0 auto;\n    pointer-events: all;\n    padding: 20px;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                      {{title}}                  ×                                        '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityCardComponent', 'selector': 'app-city-card'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'CityDropDownComponent', 'selector': 'app-city-drop-down'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'ModalComponent', 'selector': 'app-modal'}];\n    var DIRECTIVES = [{'name': 'DynamicContentDirective', 'selector': '[dynamicContent]'}];\n    var ACTUAL_COMPONENT = {'name': 'ModalComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RouterServiceMock.html":{"url":"classes/RouterServiceMock.html","title":"class - RouterServiceMock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RouterServiceMock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mock/service/router-service.mock.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                navigate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            navigate\n                        \n                        \n                    \n                \n            \n            \n                \nnavigate()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mock/service/router-service.mock.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class RouterServiceMock {\n\n    navigate() {\n\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SharedModule.html":{"url":"modules/SharedModule.html","title":"module - SharedModule","body":"\n                   \n\n\n\n\n    Modules\n    SharedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_declarations\n\n\n\ncluster_SharedModule_exports\n\n\n\n\nCityCardComponent\n\nCityCardComponent\n\n\n\nSharedModule\n\nSharedModule\n\nSharedModule -->\n\nCityCardComponent->SharedModule\n\n\n\n\n\nCityDropDownComponent\n\nCityDropDownComponent\n\nSharedModule -->\n\nCityDropDownComponent->SharedModule\n\n\n\n\n\nDynamicContentDirective\n\nDynamicContentDirective\n\nSharedModule -->\n\nDynamicContentDirective->SharedModule\n\n\n\n\n\nModalComponent\n\nModalComponent\n\nSharedModule -->\n\nModalComponent->SharedModule\n\n\n\n\n\nCityCardComponent \n\nCityCardComponent \n\nCityCardComponent  -->\n\nSharedModule->CityCardComponent \n\n\n\n\n\nCityDropDownComponent \n\nCityDropDownComponent \n\nCityDropDownComponent  -->\n\nSharedModule->CityDropDownComponent \n\n\n\n\n\nDynamicContentDirective \n\nDynamicContentDirective \n\nDynamicContentDirective  -->\n\nSharedModule->DynamicContentDirective \n\n\n\n\n\nModalComponent \n\nModalComponent \n\nModalComponent  -->\n\nSharedModule->ModalComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/shared/shared.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            CityCardComponent\n                        \n                        \n                            CityDropDownComponent\n                        \n                        \n                            DynamicContentDirective\n                        \n                        \n                            ModalComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CityCardComponent\n                        \n                        \n                            CityDropDownComponent\n                        \n                        \n                            DynamicContentDirective\n                        \n                        \n                            ModalComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CityCardComponent } from './components/city-card/city-card.component';\nimport { ModalModule } from 'ngx-bootstrap';\nimport { ModalComponent } from './components/modal/modal.component';\nimport { DynamicContentDirective } from './directives/dynamic-content.directive';\nimport { CityDropDownComponent } from './widgets/city-drop-down/city-drop-down.component';\nimport { TranslateModule } from '@ngx-translate/core';\n\nconst COMPONENTS = [\n  CityCardComponent,\n  ModalComponent\n]\n\nconst WIDGETS = [\n  CityDropDownComponent\n]\n\nconst DIRECTIVES = [\n  DynamicContentDirective\n]\n@NgModule({\n  declarations: [...COMPONENTS, ...DIRECTIVES, ...WIDGETS],\n  providers: [],\n  exports: [...COMPONENTS, ...DIRECTIVES, ModalModule, ...WIDGETS],\n  imports: [\n    HttpClientModule,\n    TranslateModule,\n    ModalModule.forRoot(),\n    CommonModule\n  ]\n})\nexport class SharedModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StorageService.html":{"url":"injectables/StorageService.html","title":"injectable - StorageService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/storage.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getLocalStorage\n                            \n                            \n                                    Public\n                                removeFromLocalStorage\n                            \n                            \n                                    Public\n                                setLocalStorage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/storage.service.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getLocalStorage\n                        \n                        \n                    \n                \n            \n            \n                \ngetLocalStorage(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/storage.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeFromLocalStorage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeFromLocalStorage(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/storage.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLocalStorage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLocalStorage(key: string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/storage.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n\n  constructor() { }\n\n  getLocalStorage(key: string) {\n    try {\n      const value = JSON.parse(localStorage.getItem(key));\n      return value;\n    } catch (error) {\n      return localStorage.getItem(key);\n    }\n  }\n\n  public setLocalStorage(key: string, value: any) {\n    // Add to localstorage\n    if (typeof value === 'object') {\n      localStorage.setItem(key, JSON.stringify(value));\n    } else {\n      localStorage.setItem(key, String(value));\n    }\n  }\n\n  public removeFromLocalStorage(key: string) {\n    localStorage.removeItem(key);\n  }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                e2e/src/app.po.ts\n            \n            class\n            AppPage\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/app/app.module.ts\n            \n            function\n            createTranslateLoader\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.module.ts\n            \n            variable\n            ENTRY_COMPONENTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.module.ts\n            \n            variable\n            MODULES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.module.ts\n            \n            variable\n            SERVICES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/city/city-resolver.guard.ts\n            \n            guard\n            CityResolverGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/city/city.component.ts\n            \n            component\n            CityComponent\n            \n                55 %\n                (5/9)\n            \n        \n        \n            \n                \n                src/app/home/home.component.ts\n            \n            component\n            HomeComponent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/mock/service/activatedroute-service.mock.ts\n            \n            class\n            ActivatedRouteServiceMock\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/mock/service/app-service.mock.ts\n            \n            class\n            AppServiceMock\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/mock/service/city-service.mock.ts\n            \n            class\n            CityServiceMock\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/app/mock/service/router-service.mock.ts\n            \n            class\n            RouterServiceMock\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/shared/components/city-card/city-card.component.ts\n            \n            component\n            CityCardComponent\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/app/shared/components/modal/modal.component.ts\n            \n            component\n            ModalComponent\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/app/shared/constants/defines.ts\n            \n            variable\n            JSON_PATHS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/constants/defines.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/constants/routes-config.ts\n            \n            variable\n            API\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/directives/dynamic-content.directive.ts\n            \n            directive\n            DynamicContentDirective\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/shared/interface/iCity.ts\n            \n            interface\n            ICity\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/app/shared/interface/iCoord.ts\n            \n            interface\n            ICoord\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/shared/interface/iForecast.ts\n            \n            interface\n            IForecast\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/shared/interface/iMain.ts\n            \n            interface\n            IMain\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/shared/interface/iVolume.ts\n            \n            interface\n            IVolume\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/shared/interface/iWeather.ts\n            \n            interface\n            IWeather\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/shared/interface/iWind.ts\n            \n            interface\n            IWind\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/shared/models/city.ts\n            \n            class\n            City\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/app/shared/models/forecast.ts\n            \n            class\n            Forecast\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/shared/services/city.service.ts\n            \n            injectable\n            CityService\n            \n                46 %\n                (7/15)\n            \n        \n        \n            \n                \n                src/app/shared/services/storage.service.ts\n            \n            injectable\n            StorageService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/shared/shared.module.ts\n            \n            variable\n            COMPONENTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/shared.module.ts\n            \n            variable\n            DIRECTIVES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/shared.module.ts\n            \n            variable\n            WIDGETS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/utils/app-initializer.ts\n            \n            function\n            appInitializer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/utils/custom-translate-loader.ts\n            \n            class\n            CustomTranslateLoader\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/shared/utils/dynamic-content.ts\n            \n            class\n            DynamicComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/shared/widgets/city-drop-down/city-drop-down.component.ts\n            \n            component\n            CityDropDownComponent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            context\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            require\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~7.2.0\n        \n            @angular/common : ~7.2.0\n        \n            @angular/compiler : ~7.2.0\n        \n            @angular/core : ~7.2.0\n        \n            @angular/forms : ~7.2.0\n        \n            @angular/platform-browser : ~7.2.0\n        \n            @angular/platform-browser-dynamic : ~7.2.0\n        \n            @angular/router : ~7.2.0\n        \n            @ngx-translate/core : ^11.0.1\n        \n            @ngx-translate/http-loader : ^4.0.0\n        \n            @types/highcharts : ^5.0.36\n        \n            angular-highcharts : 7.0.2\n        \n            bootstrap : ^4.3.1\n        \n            core-js : ^2.5.4\n        \n            express : ^4.16.4\n        \n            highcharts : ^6.2.0\n        \n            jsonpath : ^1.0.1\n        \n            ngx-bootstrap : ^3.2.0\n        \n            path : ^0.12.7\n        \n            rxjs : ~6.3.3\n        \n            tslib : ^1.9.0\n        \n            zone.js : ~0.8.26\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appInitializer   (src/.../app-initializer.ts)\n                        \n                        \n                            createTranslateLoader   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/shared/utils/app-initializer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            appInitializer\n                        \n                        \n                    \n                \n            \n            \n                \nappInitializer(translateService)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    translateService\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            createTranslateLoader\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTranslateLoader(http)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    http\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nOpenWeather\nThis project was generated with Angular CLI version 7.3.4.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SharedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_declarations\n\n\n\ncluster_SharedModule_exports\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nCityComponent\n\nCityComponent\n\nAppModule -->\n\nCityComponent->AppModule\n\n\n\n\n\nHomeComponent\n\nHomeComponent\n\nAppModule -->\n\nHomeComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nCityCardComponent \n\nCityCardComponent \n\nCityCardComponent  -->\n\nSharedModule->CityCardComponent \n\n\n\n\n\nCityDropDownComponent \n\nCityDropDownComponent \n\nCityDropDownComponent  -->\n\nSharedModule->CityDropDownComponent \n\n\n\n\n\nDynamicContentDirective \n\nDynamicContentDirective \n\nDynamicContentDirective  -->\n\nSharedModule->DynamicContentDirective \n\n\n\n\n\nModalComponent \n\nModalComponent \n\nModalComponent  -->\n\nSharedModule->ModalComponent \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCityService\n\nCityService\n\nAppModule -->\n\nCityService->AppModule\n\n\n\n\n\nStorageService\n\nStorageService\n\nAppModule -->\n\nStorageService->AppModule\n\n\n\n\n\nCityCardComponent\n\nCityCardComponent\n\nSharedModule -->\n\nCityCardComponent->SharedModule\n\n\n\n\n\nCityDropDownComponent\n\nCityDropDownComponent\n\nSharedModule -->\n\nCityDropDownComponent->SharedModule\n\n\n\n\n\nDynamicContentDirective\n\nDynamicContentDirective\n\nSharedModule -->\n\nDynamicContentDirective->SharedModule\n\n\n\n\n\nModalComponent\n\nModalComponent\n\nSharedModule -->\n\nModalComponent->SharedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        4 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            API   (src/.../routes-config.ts)\n                        \n                        \n                            COMPONENTS   (src/.../shared.module.ts)\n                        \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            DIRECTIVES   (src/.../shared.module.ts)\n                        \n                        \n                            ENTRY_COMPONENTS   (src/.../app.module.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            JSON_PATHS   (src/.../defines.ts)\n                        \n                        \n                            MODULES   (src/.../app.module.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                        \n                            routes   (src/.../defines.ts)\n                        \n                        \n                            SERVICES   (src/.../app.module.ts)\n                        \n                        \n                            WIDGETS   (src/.../shared.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/shared/constants/routes-config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            API\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    'OpenWeather': {\n        'CityWeather': environment.APIBaseUrl + 'data/2.5/weather?id={city}&units=metric&appid=' + environment.AppId,\n        'CityForecast': environment.APIBaseUrl + 'data/2.5/forecast?id={city}&units=metric&appid=' + environment.AppId,\n        'CitiesWeather': environment.APIBaseUrl + 'data/2.5/group?id={ids}&units=metric&appid=' + environment.AppId,\n        'Icons': 'http://openweathermap.org/img/w/{icon}.png',\n        'Flags': 'https://www.countryflags.io/{country}/flat/64.png'\n    },\n    \"Cities\": {\n        'Data': './assets/data/cities.json'\n    }\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/shared/shared.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            COMPONENTS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  CityCardComponent,\n  ModalComponent\n]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DIRECTIVES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  DynamicContentDirective\n]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WIDGETS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  CityDropDownComponent\n]\n                        \n                    \n\n\n            \n        \n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require.context('./', true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n\n            \n        \n\n    src/app/app.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ENTRY_COMPONENTS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  CityDropDownComponent\n]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MODULES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  SharedModule,\n  ChartModule,\n  TranslateModule.forRoot({\n    loader: {\n      provide: TranslateLoader,\n      useFactory: (createTranslateLoader),\n      deps: [HttpClient]\n    }\n  }),\n]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SERVICES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  AppService,\n  CityService,\n  StorageService,\n  CityResolverGuard\n]\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false,\n  APIBaseUrl:\"https://api.openweathermap.org/\",\n  AppId: '9765e5667b1e716a354bdb880cc11d53'\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true,\n  APIBaseUrl:\"https://api.openweathermap.org/\",\n  AppId: '9765e5667b1e716a354bdb880cc11d53'\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/shared/constants/defines.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            JSON_PATHS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    City: {\n        id: '$.id',\n        name: '$.name',\n        code: '$.cod',\n        lat: '$.coord.lat',\n        lon: '$.coord.lon',\n        dt: '$.dt',\n        dtText: '$.dt_txt',\n        clouds: '$.clouds.all',\n        humidity: '$.main.humidity',\n        sea_level: '$.main.sea_level',\n        grnd_level: '$.main.grnd_level',\n        pressure: '$.main.pressure',\n        temp: '$.main.temp',\n        tempMax: '$.main.temp_max',\n        tempMin: '$.main.temp_min',\n        temp_kf: '$.main.temp_kf',\n        windSpeed: '$.wind.speed',\n        windDegree: '$.wind.deg',\n        rain: 'rain',\n        snow: 'snow',\n        _1h: '1h',\n        _3h: '3h',\n        snow1h: '$.snow.1h',\n        sunrise: '$.sys.sunrise',\n        sunset: '$.sys.sunset',\n        countryCode: '$.sys.country',\n        forecastCountryCode: '$.country',\n        type: '$.sys.type',\n        weather: '$.weather',\n        weatherId: '$.id',\n        weatherMain: '$.main',\n        weatherDescription: '$.description',\n        weatherIcon: '$.icon',\n        city: \"$.city\",\n        population: \"$.population\",\n        forecasts: \"$.list\"\n    }\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            routes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    'city': '/city',\n    'home': '/home'\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
